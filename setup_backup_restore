#!/bin/bash

os-setup_backup_restore() {

	os-install_dependencies s3cmd

	mkdir -p $conf_backups_local_dir

	clear


	echo "${b}$short_name performs nightly backups and stores them locally for safekeeping.${x}"
	echo


	describe_setting() {

		echo "${b}Please set how many backups should be kept locally at the very minimum [suggested between 3 and 7].${x}"
		echo

	}

	os-set_option -o min_local_backups -v n -d y -s backups/local


	describe_setting() {

		echo "${b}Please set the maximum number of backups that should be kept locally [suggested between 8 and 42].${x}"
		echo

	}

	os-set_option -o max_local_backups -v n -d y -s backups/local


	describe_setting() {

		echo "${b}Please set the maximum space that local archives storage should occupy in MB [suggested between 1000 and 8000].${x}"
		echo

	}

	os-set_option -o max_local_storage -v n -d y -s backups/local


	describe_setting() {

		echo "${b}$short_name can store your backups on an S3 storage server for safe, offsite recovery in case of need.${x}"
		echo
		echo "${b}Now specify your desired backup storage location [local/s3]:${x}"
		echo

	}

	validate_input() {

		case $input in
			local)	backup_location=local
				valid=y
				;;
			s3)	backup_location=s3
				valid=y
				;;
			*)	echo "${r}${b}Invalid setting for | backup_type | in function | ${FUNCNAME[0]} |.${x}"
				echo
				valid=n
				;;
		esac

	}

	os-set_option -o backup_location -v y -d y -s backups


	if [ $backup_location = "s3" ]
	then

		if [ ! "${prev_val_outcome-null}" = "kept" ]
		then

			read -rp "${b}Do you have an S3 file storage server already set up? (Y/n): ${x}" -n 1
			echo

			if [[ ! $REPLY =~ ^[Nn]$ ]]
			then

				echo "${b}Ok, so let's set up your S3 file storage server settings now.${x}"
				echo
				s3_continue_setup=y

			else

				echo
				echo "${b}No problem, follow this guide [link will be published here soon] to configure your S3 file storage server.${x}"
				echo
				echo "${b}Keeping backups local for now [simply re-run this installation when you're ready to upgrade your backups to S3 enabled].${x}"
				echo

				backup_location=local
				echo "local" > $conf_dir/backup_location

				read -rp "${b}[press enter to continue reading...]${x}"
				clear

			fi

		else

			s3_continue_setup=y

		fi

		if [ "${s3_continue_setup-null}" = "y" ]
		then

			mkdir -p "$conf_backups_s3_dir"

			echo  "${r}${b}If you're setting up this machine to restore a previous $short_name installation from another machine, you must specify so now.${x}"
			echo
			echo "${b}Selecting yes at the next prompt will block ALL backups to S3 to avoid overwriting previous valid backups on S3 and give you a chance to restore them on this machine.${x}"
			echo
			echo "${r}${b}If you choose yes, make sure NOT to use this instance as it is [as it will NOT be backed up on S3] but rather remember to perform the restore right after you're finished running this install script.${x}"
			echo
			read -rp "${b}Are you setting up this machine to restore a previous $short_name installation from another machine? (Y/n): ${x}" -n 1
			echo

			if [[ ! $REPLY =~ ^[Nn]$ ]]
			then

				echo "${r}${b}Ok, blocking ALL backups to S3 until a restore is performed. Do so right after you're finished running this install script.${x}"
				echo

				restore_intent=y
				touch "$conf_backups_s3_dir/block_s3_backups"

			else

				echo
				echo "${b}NOT selected restore mode, ${g}will allow S3 backups${x}${b}..."
				echo

			fi
			read -rp "${b}[press enter to continue reading...]${x}"
			clear

			if [ ! -f "$conf_backups_s3_dir/passphrase" ]
			then
				touch "$conf_backups_s3_dir/passphrase"
				chmod 700 "$conf_backups_s3_dir/passphrase"
				generated_passphrase="$(pwgen 42 1)"
				echo "$generated_passphrase" > "$conf_backups_s3_dir/passphrase"
			else
				chmod 700 "$conf_backups_s3_dir/passphrase" # In case someone accidentally modified permissions on $conf_backups_s3_dir
			fi

			passphrase="$(cat $conf_backups_s3_dir/passphrase)"

			echo "${b}Your S3 backups encryption passphrase is:${x}"
			echo
			echo "${g}${b} | $passphrase | ${x}"
			echo
			echo "${b}Make sure you keep it saved in a safe location OUTSIDE of this machine and NOT on the S3 file storage server.${x}"
			echo
			echo "${r}${b}You will NOT be able to restore ANY backup without this passphrase.${x}"
			echo
			echo "${b}This is your only chance to save this passphrase. If you don't do it now and this machine's data is lost, so will be your backups.${x}"
			echo
			read -rp "${b}[press enter to continue reading...]${x}"
			clear

			until [ ${s3_setup_accepted-null} = "y" ]
			do

				declare -A s3_options_array=(
					[s3_access_key_id]="AWS Access Key ID"
					[s3_secret_access_key]="AWS Secret Access Key"
					[s3_endpoint]="S3 Endpoint URL"
					[s3_bucket_name]="S3 Bucket Name"
				)

				for i in "${!s3_options_array[@]}"
				do

					echo $i is the stub #debug
					echo ${s3_options_array[$i]} is the description #debug

					describe_setting() {

						echo "${b}Now set your ${s3_options_array[$i]}.${x}"
						echo

					}

					os-set_option -o "$i" -v n -d y -s backups/s3

				done

				echo "----------------"
				echo
				echo "${b}To make sure everything is correct:${x}"
				echo
				echo "1] Your ${b}AWS Access Key ID${x} will be:"
				echo
				echo "${b} | $s3_access_key_id | ${x}"
				echo
				echo "2] Your ${b}AWS Secret Access Key${x} will be:"
				echo
				echo "${b} | $s3_secret_access_key | ${x}"
				echo
				echo "3] Your ${b}S3 Endpoint URL${x} will be:"
				echo
				echo "${b} | $s3_endpoint | ${x}"
				echo
				echo "4] Your ${b}S3 Bucket Name${x} will be:"
				echo
				echo "${b} | $s3_bucket_name | ${x}"
				echo
				echo "----------------"
				echo

				read -rp "${b}Does everything look all right? (Y/n): ${x}" -n 1
				echo
				if [[ ! $REPLY =~ ^[Nn]$ ]]
				then

					echo "${b}Ok, proceeding to check S3 connection details${x}."
					echo

					### Check S3 connection

					s3cmd --configure --access_key="$s3_access_key_id" --secret_key="$s3_secret_access_key" --host="$s3_endpoint" -s --no-encrypt --dump-config 2>&1 | tee /root/.s3cfg &> /dev/null
					set +e
					s3cmd info s3://"$s3_bucket_name" >/dev/null 2>&1

					if [[ $? -eq 0 ]]; then
						echo "${g}${b}S3 connection details appear to be valid.${x}"
						echo
						s3_setup_accepted=y
						sleep 1
					else
						echo "${r}${b}S3 connection details do NOT appear to be valid.${x}"
						echo
						read -rp "${b}Would you like to try setting it up again? (Y/n): ${x}" -n 1
					    	echo
					    	if [[ ! $REPLY =~ ^[Nn]$ ]]
					    	then
							s3_setup_accepted=n
							echo "${b}Ok, repeating S3 setup...${x}"
							echo
						else
							s3_setup_accepted=y
							echo
							echo "${b}Ok, skipping S3 setup and REMOVING s3 setting from $short_name...${x}"
							echo
							backup_location=local
							echo "local" > $conf_backups_dir/backup_location
							read -rp "${b}[press enter to continue reading...]${x}"
							clear
						fi
					fi
					set -e

				else
					s3_setup_accepted=n
					echo
					echo "${b}Ok, repeating S3 setup...${x}"
					echo
				fi

			done
			clear

		fi

	else

		echo
		echo "${b}Ok, keeping backups local. Remember to periodically copy your backups from the backups directory over to your backup storage machine!${x}"
		echo

		read -rp "${b}[press enter to continue reading...]${x}"
		clear

	fi


}
