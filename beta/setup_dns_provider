#!/usr/bin/env bash

dna-setup_dns_provider() {

	while getopts ":s:" arguments; do
		case $arguments in
			s)	skip_questions=y
			;;
			\?)	echo "${r-}${b-}Invalid option | -$OPTARG | for function | ${FUNCNAME[0]} |.${x-}"
			echo
			dna-exit
			;;
		esac
	done
    OPTIND=1

	dna-install_dependencies -p "curl"

	mkdir -p "$conf_dns_dir"

	until [ ${dns_setup_accepted-null} = "y" ]
	do

		describe_setting() {

			echo "${b-}Please choose your DNS provider type [miab/cloudflare]:${x-}"
			echo

		}

		validate_input() {

			case $input in
				miab)			dns_provider_type=miab
				valid=y
				;;
				cloudflare)		dns_provider_type=cloudflare
				valid=y
				;;
				*)	echo "${r-}${b-}Invalid setting for | backup_local_storage_location | in function | ${FUNCNAME[0]} |.${x-}"
				echo
				valid=n
				;;
			esac

		}

		dna-set_option -o dns_provider_type -v y -d y -p dns

		declare -A s3_options_array=(
			[s3_access_key_id]="AWS Access Key ID"
			[s3_secret_access_key]="AWS Secret Access Key"
			[s3_endpoint]="S3 Endpoint URL"
			[s3_bucket_name]="S3 Bucket Name"
		)

		for i in "${!s3_options_array[@]}"
		do

			describe_setting() {

				echo "${b-}Now set your ${s3_options_array[$i]}.${x-}"
				echo

			}

			dna-set_option -o "$i" -v n -d y -p backups/s3

		done

		echo "----------------"
		echo
		echo "${b-}To make sure everything is correct:${x-}"
		echo
		echo "1] Your ${b-}AWS Access Key ID${x-} will be:"
		echo
		echo "${b-} | ${g-}$s3_access_key_id${x-}${b-} | ${x-}"
		echo
		echo "2] Your ${b-}AWS Secret Access Key${x-} will be:"
		echo
		echo "${b-} | ${g-}$s3_secret_access_key${x-}${b-} | ${x-}"
		echo
		echo "3] Your ${b-}S3 Endpoint URL${x-} will be:"
		echo
		echo "${b-} | ${g-}$s3_endpoint${x-}${b-} | ${x-}"
		echo
		echo "4] Your ${b-}S3 Bucket Name${x-} will be:"
		echo
		echo "${b-} | ${g-}$s3_bucket_name${x-}${b-} | ${x-}"
		echo
		echo "----------------"
		echo

		read -rp "${b-}Does everything look all right? (Y/n): ${x-}" -n 1
		echo
		if [[ ! $REPLY =~ ^[Nn]$ ]]
		then

			echo "${b-}Ok, proceeding to check S3 connection details${x-}."
			echo

			### Check S3 connection

			s3cmd --configure --access_key="$s3_access_key_id" --secret_key="$s3_secret_access_key" --host="$s3_endpoint" --host-bucket="%(bucket).$s3_endpoint" -s --no-encrypt --dump-config 2>&1 | tee /root/.s3cfg &> /dev/null
			set +e
			s3cmd info s3://"$s3_bucket_name" >/dev/null 2>&1

			if [[ $? -eq 0 ]]; then
				echo "${g-}${b-}S3 connection details appear to be valid.${x-}"
				echo
				s3_setup_accepted=y
				sleep 1
			else
				echo "${r-}${b-}S3 connection details do NOT appear to be valid.${x-}"
				echo
				read -rp "${b-}Would you like to try setting it up again? (Y/n): ${x-}" -n 1
				echo
				if [[ ! $REPLY =~ ^[Nn]$ ]]
				then
					s3_setup_accepted=n
					echo "${b-}Ok, repeating S3 setup...${x-}"
					echo
				else
					s3_setup_accepted=y
					echo
					echo "${b-}Ok, skipping S3 setup and REMOVING S3 setting from $project_name...${x-}"
					echo
					backup_archival_location=local
					echo "local" > $conf_backup_dir/backup_archival_location
					read -rp "${b-}[press enter to continue reading...]${x-}"
					clear
				fi
			fi
			set -e

		else
			s3_setup_accepted=n
			echo
			echo "${b-}Ok, repeating S3 setup...${x-}"
			echo
		fi

	done
	clear

	unset skip_questions

}

dna-setup_backup_restore() {

	mkdir -p $conf_backups_local_dir

	clear


	echo "${b-}$project_name performs nightly backups and stores them locally for safekeeping.${x-}"
	echo


	echo "${b-}By default $project_name stores local backups in the | ${g-}$install_dir/backups${x-}${b-} | directory.${x-}"
	echo
	echo "${b-}If and only if your machine doesn't have sufficient local storage space available, you may specify another location.${x-}"
	echo
	echo "${b-}Bare in mind this location is intented to store local backups in real time as they're being produced, and therefore must always be directly accessible to $project_name at the filesystem level.${x-}"
	echo
	echo "${b-}If you decide not to use the default location, be sure so specify a highly available and high performance location.${x-}"
	echo
	echo "${b-}Do not use a custom location for backup security / resilience purposes, but rather only if your machine has storage space limitations.${x-}"
	echo
	echo "${b-}$project_name already has a built-in S3 backup archival function, which you can set up in a few steps after this one independently of this setting, and which easily supports low performance and low bandwith destinations.${x-}"
	echo

	### If option "backup_local_storage_location" is set and is currently "default", delete the "backup_local_storage_path" option to start fresh

	if [ -f "$conf_backups_local_dir/backup_local_storage_location" ]
	then
		if [[ $(< "$conf_backups_local_dir/backup_local_storage_location") = "default" ]]
		then
			if [ -f "$conf_backups_local_dir/backup_local_storage_path" ]
			then
				rm "$conf_backups_local_dir/backup_local_storage_path"
			fi
		fi
	fi

	describe_setting() {

		echo "${b-}Please set your local backup storage location [default/custom]:${x-}"
		echo

	}

	validate_input() {

		case $input in
			default)	backup_local_storage_location=default
			valid=y
			;;
			custom)		backup_local_storage_location=custom
			valid=y
			;;
			*)	echo "${r-}${b-}Invalid setting for | backup_local_storage_location | in function | ${FUNCNAME[0]} |.${x-}"
			echo
			valid=n
			;;
		esac

	}

	dna-set_option -o backup_local_storage_location -v y -d y -p backups/local

	if [ $backup_local_storage_location = "default" ]
    then

		backup_local_storage_path="$install_dir/backups"
		touch "$conf_backups_local_dir/backup_local_storage_path"
		echo "$install_dir/backups" > "$conf_backups_local_dir/backup_local_storage_path"

	else

		describe_setting() {

			echo "${b-}Please specify your custom backup local storage location [i.e. /mnt/network-volume/raptor-backups/]:${x-}"
			echo

		}

		validate_input() {

			if [ -d $input ]
			then
				echo "${g-}${b-}Location found and valid.${x-}"
				echo
				valid=y
			else
				echo "${r-}${b-}Location not found.${x-}"
				echo
				echo "${b-}Ensure the path is valid and try again.${x-}"
				echo
				valid=n
			fi

		}

		dna-set_option -o backup_local_storage_path -v y -d y -p backups/local

    fi

	describe_setting() {

		echo "${b-}Please choose your backup compression type [bz2/none]:${x-}"
		echo

	}

	validate_input() {

		case $input in
			bz2)	backup_compression_type=bz2
			valid=y
			;;
			none)	backup_compression_type=none
			valid=y
			;;
			*)	echo "${r-}${b-}Invalid setting for | backup_type | in function | ${FUNCNAME[0]} |.${x-}"
			echo
			valid=n
			;;
		esac

	}

	dna-set_option -o backup_compression_type -v y -d y -p backups/local

	describe_setting() {

		echo "${b-}Please set how many backups should be kept locally at the very minimum [suggested between 3 and 7].${x-}"
		echo

	}

	dna-set_option -o min_local_backups -v n -d y -p backups/local


	describe_setting() {

		echo "${b-}Please set the maximum number of backups that should be kept locally [suggested between 8 and 42].${x-}"
		echo

	}

	dna-set_option -o max_local_backups -v n -d y -p backups/local


	describe_setting() {

		echo "${b-}Please set the maximum space that local archives storage should occupy in MB [suggested between 1000 and 8000].${x-}"
		echo

	}

	dna-set_option -o max_local_storage -v n -d y -p backups/local


	describe_setting() {

		echo "${b-}$project_name can store your backups on an S3 storage server for safe, offsite recovery in case of need.${x-}"
		echo
		echo "${b-}Now specify your desired backup storage location [local/s3]:${x-}"
		echo

	}

	validate_input() {

		case $input in
			local)	backup_archival_location=local
			valid=y
			;;
			s3)		backup_archival_location=s3
			valid=y
			;;
			*)	echo "${r-}${b-}Invalid setting for | backup_type | in function | ${FUNCNAME[0]} |.${x-}"
			echo
			valid=n
			;;
		esac

	}

	dna-set_option -o backup_archival_location -v y -d y -p backups


	if [ $backup_archival_location = "s3" ]
	then

		if [ ! "${previous_value_outcome-null}" = "kept" ]
		then

			read -rp "${b-}Do you have an S3 file storage server already set up? (Y/n): ${x-}" -n 1
			echo

			if [[ ! $REPLY =~ ^[Nn]$ ]]
			then

				echo "${b-}Ok, so let's set up your S3 file storage server settings now.${x-}"
				echo
				s3_continue_setup=y

			else

				echo
				echo "${b-}No problem, follow this guide [link will be published here soon] to configure your S3 file storage server.${x-}"
				echo
				echo "${b-}Keeping backups local for now [simply re-run this installation when you're ready to upgrade your backups to S3 enabled].${x-}"
				echo

				backup_archival_location=local
				echo "local" > $conf_dir/backup_archival_location

				read -rp "${b-}[press enter to continue reading...]${x-}"
				clear

			fi

		else

			s3_continue_setup=y

		fi

		if [ "${s3_continue_setup-null}" = "y" ]
		then

			dna-setup_backup_restore_s3

			### Check that the user has actually completed and confirmed S3 connection

			if [ "${backup_archival_location}" = "s3" ]
			then

				describe_setting() {

					echo "${b-}Please set your desired minimum backup history interval to keep on S3.${x-}"
					echo
					echo "${b-}Indicate an interval, which is a number followed by one of the characters D, W, M, or Y (indicating days, weeks, months, or years respectively).${x-}"
					echo

				}

				dna-set_option -o duplicity_min_history -v n -d y -p backups/s3

				describe_setting() {

					echo "${b-}Also upload a full backup archive file to S3 on the first of the month? [y/n]${x-}"
					echo

				}

				validate_input() {

					case $input in
						y)	s3_monthly_uploads=y
							valid=y
							;;
						n)	s3_monthly_uploads=s3
							valid=y
							;;
						*)	dna-echo -e "Invalid setting for | ${n-}s3_monthly_uploads${r-} | in function | ${n-}${FUNCNAME[0]}${r-} |."
							valid=n
							;;
					esac

				}

				dna-set_option -o s3_monthly_uploads -v y -d y -p backups/s3

			fi

		fi

	else

		echo
		echo "${b-}Ok, keeping backups local. Remember to periodically copy your backups from the backups directory over to your backup storage machine!${x-}"
		echo

		read -rp "${b-}[press enter to continue reading...]${x-}"
		clear

	fi


}
