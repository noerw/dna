#!/bin/bash

os-br_update_storage_info () {

	free_disk_space="$(df -m --output=avail / | xargs | sed -e 's/Avail //g')"
	ref_dir_size="$(du -sm "$www_dir" | xargs | sed -e "s|"${www_dir}"||g" | xargs)"

	if [ "${1:-null}" = "noS3" ] || [ "$backup_location" = "local" ]
	then
		est_backup_size=$(($ref_dir_size * 2))
	else
		est_backup_size=$(($ref_dir_size * 3))
	fi

	local_archive_items="$(ls -1q $backups_archive_dir | wc -l)"
	local_archive_size="$(du -sm $backups_archive_dir | xargs | sed "s|${backups_archive_dir}||g" | xargs)"

}

os-br_purge_loop () {

	if [ $local_archive_items -gt $min_local_backups ]
	then

		counter=$(($counter - 1))

		### Prevent infinite loops in case of rm failure

		if [ $counter = 0 ]
		then
			echo "${r}${b}Infinite loop error caught. Exiting...${b}"
			exit 1
		fi

		if [ $local_archive_items -gt $counter ]
		then
			tailnumber=$(( $counter + 1 ))
			( cd $backups_archive_dir && ls -t | tail -n +"$tailnumber" | xargs -d '\n' rm )
		fi

		os-br_os-br_update_storage_info

	else

		echo "${r}${b}The specified number of minimum backups to keep [$min_local_backups] is too high $error_description.${x}"
		echo
		echo "${b}Lower this figure by re-running the install and lowering this figure during configuration or make more space available on this machine.${x}"
		echo

		if [ -d "$backups_archive_dir"/old ]
		then

			old_dir_size="$(du -sm "$backups_archive_dir"/old | xargs | sed -e "s|"${backups_archive_dir}/old"||g" | xargs)"

			echo "${b}Found | $backups_archive_dir/old | directory weighing | $old_dir_size |.${x}"
			echo
			echo "${b}Consider freeing up space by removing these old backups if unneeded.${x}"
			echo

		fi

		os-exit_function

	fi

}

os-br_purge_backups() {

	### Purge backups older than the latest $max_local_backups

	local_archive_items="$(ls -1q $backups_archive_dir | wc -l)"
	if [ $local_archive_items -gt $max_local_backups ]
	then
		tailnumber=$(( $max_local_backups + 1 ))
		( cd $backups_archive_dir && ls -t | tail -n +"$tailnumber" | xargs -d '\n' rm )
		os-br_update_storage_info
	fi

	echo "${b}You have $local_archive_items local backups occupying $local_archive_size MB of space.${x}"
	echo

	if [ $local_archive_size -gt $max_local_storage ]
	then

		echo "${r}${b}Local archive size [$local_archive_size MB] LARGER than | max_local_storage | setting [$max_local_storage MB].${x}"
		echo
		echo "${b}Now purging old backups while respecting your specified number of minimum backups to keep...${x}"
		echo
		error_description="to stay below the | max_local_storage | setting you chose"

		counter=$max_local_backups

		while [ $local_archive_size -gt $max_local_storage ]
		do
			os-br_purge_loop
		done

		echo "${g}${b}Local archive size now low enough [$local_archive_size MB] to respect your settings.${x}"
		echo
		echo "${b}Purged all backups older than the most recent | $counter |.${x}"
		echo
		echo "${b}Continuing...${x}"
		echo

	fi

	if [ $est_backup_size -gt $free_disk_space ]
	then

		echo "${r}${b}Estimated backup size [$est_backup_size MB] LARGER than available disk space [$free_disk_space MB].${x}"
		echo
		echo "${b}Now purging old backups while respecting your specified number of minimum backups to keep...${x}"
		echo
		error_description="to free enough disk space for the next backup"

		counter=$max_local_backups

		while [ $est_backup_size -gt $free_disk_space ]
		do
			os-br_purge_loop
		done

		echo "${g}${b}Enoguh free space [$free_disk_space MB] now available for new backup.${x}"
		echo
		echo "${b}Purged all backups older than the most recent | $counter |.${x}"
		echo
		echo "${b}Continuing...${x}"
		echo

	fi

}

os-br_purge_dirs() {

	### Purge temp and create directories

	if [ -d $tmp_dir ]
	then
		rm -r ${tmp_dir:?}
	fi

	if [ -d "$backups_latest_dir" ]
	then
		rm -r ${backups_latest_dir:?}
	fi

	if [ -d "$restores_dir/s3" ]
	then
		rm -r ${restores_dir:?}/s3
	fi

}

os-br_create_dirs() {

	if [ "${1:-null}" = "backup" ]
	then

		mkdir -p $backups_archive_dir
		mkdir -p $backups_latest_dir
		backup_name=$scriptname-$now
		tmp_backup_dir=$tmp_dir/$backup_name
		mkdir -p "$tmp_backup_dir"

	fi

	mkdir -p $tmp_dir

}

os-br_purge_incomplete_archives() {

	if [ -d $backups_archive_dir ]
	then
		find $backups_archive_dir -type f -name '*.incomplete' -delete
	fi

}

os-br_restore_from_here() {

	if [ ! -d $backups_archive_dir ]
	then
		echo "${r}${b}Local backups directory [$backups_archive_dir] not found.${x}"
		echo
		echo "${b}It's possible you've already partially run this restore script choosing the | elsewhere | option, or that this machine never successfully ran a backup.${x}"
		echo
		echo "${b}Check your $install_dir for a directory called | backups(-[something]) | and if you find something rename the most recently datestamped directory to | backups | ."
		echo
		echo "${b}Exiting...${x}"
		echo
		exit 1
	fi

	count="$(ls -1 $backups_archive_dir/*.tar.bz2 2>/dev/null | wc -l)"
	if [ $count = 0 ]
	then
		echo "${r}${b}No backup archives found in local backups directory [$backups_archive_dir].${x}"
		echo
		echo "${b}It's possible you've already partially run this restore script choosing the | elsewhere | option, or that this machine never successfully ran a backup.${x}"
		echo
		echo "${b}Check your $install_dir for a directory called | backups(-[something]) | and if you find something rename the most recently datestamped directory to | backups | ."
		echo
		echo "${b}Exiting...${x}"
		echo
		exit 1
	fi

	echo "${b}These are the backup dates available for restore:${x}"
	echo
	ls -1 "$backups_archive_dir" | sed -e 's/ee-br-backup-//g' | sed -e 's/.tar.bz2//g'
	echo
	read -rp "${b}[press enter to continue...]${x}"
	clear

	choice="${b}Now choose the file you'd like to restore: ${x}"
	echo "$choice"
	echo

	set +u

	cd $backups_archive_dir
	unset options i
	while IFS= read -r -d $'\n' f; do
		options[i++]="$f"
	done < <(find ./ -maxdepth 1 -type f -name "*.tar.bz2" | sort -r )

	set -u

	accept=n
	until [ $accept = "y" ]
	do

		select sel_backup_file in "${options[@]}" "exit"
		do
			echo
			case $sel_backup_file in
				*.tar.bz2)
				echo "${b}Backup file $sel_backup_file selected.${x}"
				break
				;;
				"exit")
				echo "${b}Exiting...${x}"
				echo
				exit
				;;
				*)
				echo "${r}${b}Invalid option. Retry...${x}"
				echo
				;;
			esac
		done
		echo

		valid=n
		until [ $valid = "y" ]
		do
			read -n 1 -rp "${b}Is this the correct file?${x} (${b}Y${x}[es]/${b}n${x}[o]/${b}e${x}[xit]) " answer;
			case $answer in
				"")
				echo
				valid=y
				accept=y
				;;
				y)
				echo -e "\\n"
				valid=y
				accept=y
				;;
				n)
				echo -e "\\n"
				echo "${b}No problem, please select your desired file again now...${x}"
				echo
				valid=y
				accept=n
				;;
				e)
				echo -e "\\n"
				echo "${b}Exiting...${x}"
				echo
				exit
				;;
				*)
				echo -e "\\n"
				echo "${b}Invalid option. Retry...${x}"
				echo
				valid=n
				accept=n
				;;
			esac
		done

	done

	mkdir -p $restores_dir/local/
	tar -xvjf "$sel_backup_file" -C "$restores_dir"/local/

}

os-br_restore_from_standalone() {

	echo "${b}Ok, restoring from a standalone $short_name backup file.${x}"
	echo
	if [ -d "/root/$short_name-restore/" ]
	then
		rm -r "/root/$short_name-restore/"
	fi
	mkdir -p "/root/$short_name-restore/"
	read -p "${b}Do you have a file called | $short_name-backup-[date].tar.bz2 | [or similar]? (Y/n): ${x}" -n 1 -r
	echo
	if [[ ! $REPLY =~ ^[Nn]$ ]]
	then
		defined=n
		until [ $defined = "y" ]
		do
			exists=n
			until [ $exists = "y" ]
			do
				standalonebackupfile=""
				until [ ! $standalonebackupfile = "" ]
				do
					read -rp "${b}Ok, specify the path to that file now: ${x}" standalonebackupfile
					echo
				done
				if [ -f "$standalonebackupfile" ]
				then
					exists=y
				else
					echo "${r}${b}The specified file does not exists. Please retry...${x}"
					echo
					exists=n
				fi
			done
			valid=n
			until [ $valid = "y" ]
			do
				read -n 1 -rp "${b}Is | $standalonebackupfile | correct? (Y/n/e[xit]) ${x}" answer;
				case $answer in
					"")
					echo
					valid=y
					defined=y
					;;
					y)
					echo -e "\\n"
					valid=y
					defined=y
					;;
					n)
					echo -e "\\n"
					echo "${b}Ok, then please try again...${x}"
					echo
					valid=y
					defined=n
					;;
					e)
					echo -e "\\n"
					echo "${b}Exiting...${x}"
					echo
					exit
					;;
					*)
					echo -e "\\n"
					echo "${r}${b}Invalid option. Retry...${x}"
					echo
					valid=n
					defined=n
					;;
				esac
			done
		done
		echo "${b}Backup file $standalonebackupfile selected.${x}"
		echo
		tar -xvjf "$standalonebackupfile" -C "/root/$short_name-restore/"
		subdir=("/root/$short_name-restore/"*/)
		restoresubdir="$(echo "$subdir" | sed "s|/root/${short_name}-restore/||" | tr -d '/')"
		mv "/root/$short_name-restore/$restoresubdir"/* "/root/$short_name-restore/"
		rm -r "/root/$short_name-restore/$restoresubdir"
	else
		echo
		echo "${b}Ok, no problem. Make sure you populate the | /root/$short_name-restore/ | directory with these 4 files/directories from your standalone backup:${x}"
		echo
		os-br_restore_from_standalone_content_description
		echo
		echo "${r}${b}If you don't correctly place all the above files/directories, the restore will not work correctly [you will be alerted if something is wrong further along this script]${x}"
		echo
		echo "${b}As soon as you're done moving these items into place...${x}"
		echo
		read -rp "${b}[press enter to continue...]${x}"
		clear
	fi

}

os-br_duplicity_loop() {

	# Export some ENV variables so you don't have to type anything
	export AWS_ACCESS_KEY_ID=$s3_access_key_id
	export AWS_SECRET_ACCESS_KEY=$s3_secret_access_key
	export PASSPHRASE=$backups_passphrase

	# Your GPG key
	#GPG_KEY= # Insert GPG key here if using GPG

	# The S3 destination followed by bucket name
	DEST="s3://$s3_endpoint/$s3_bucket_name/$short_name/latest/"

	HOST=$(hostname)
	DATE=$(date +%Y-%m-%d)
	MAILADDR="$admin_mail"
	TODAY=$(date +%d%m%Y)

	if [ "${1:-null}" = "backup" ]
	then
		duplicity_type="backup"
	else
		duplicity_type="restore"
	fi


	duplicity_base_dir=/root/logs/$short_name-duplicity
	duplicity_log_dir=$duplicity_base_dir/$duplicity_type

	# Set up some variables for logging
	LOGFILE="$duplicity_log_dir/$duplicity_type.log"
	DAILYLOGFILE="$duplicity_log_dir/$duplicity_type.daily.log"
	FULLBACKLOGFILE="$duplicity_log_dir/$duplicity_type.full.log"

	is_running=$(ps -ef | grep duplicity  | grep python | wc -l)

	if [ ! -d $duplicity_log_dir ]
	then
		mkdir -p $duplicity_log_dir
	fi

	if [ ! -f $FULLBACKLOGFILE ]
	then
		touch $FULLBACKLOGFILE
	fi

	if [ "$is_running" -eq 0 ]
	then
		# Clear the old daily log file
		cat /dev/null > ${DAILYLOGFILE}

		# Trace function for logging, don't change this
		trace () {
			stamp=$(date +%Y-%m-%d_%H:%M:%S)
			echo "$stamp: $*" >> ${DAILYLOGFILE}
		}

		if [ "${1:-null}" = "backup" ]
		then

			# The source of your backup
			SOURCE=$backups_latest_dir/ # Use / for full system backup [not the case for $scriptname]

		fi

		FULL=
		tail -1 "${FULLBACKLOGFILE}" | grep "${TODAY}" > /dev/null || true
		if [ $? -ne 0 -a "$(date +%d)" -eq 1 ]
		then
			FULL=full
		fi;

		trace "Backup for local filesystem started"

		set +e

		if [ "${1:-null}" = "backup" ]
		then

			# How long to keep backups for
			OLDER_THAN="$duplicity_min_history"

			trace "... removing old backups"

			duplicity remove-older-than "${OLDER_THAN}" "${DEST}" >> "${DAILYLOGFILE}" 2>&1  || true

		fi

		trace "... backing up filesystem"

		#    duplicity \
		#        ${FULL} \
		#        --encrypt-key=${GPG_KEY} \
		#        --sign-key=${GPG_KEY} \
		#        --include=/var/rsnap-mysql \
		#        --include=/var/www \
		#        --include=/etc \
		#        --exclude=/** \
		#        ${SOURCE} ${DEST} >> ${DAILYLOGFILE} 2>&1

		if [ "${1:-null}" = "backup" ]
		then
			duplicity ${FULL} "${SOURCE}" "${DEST}" # Insert --encrypt-key and --sign-key after ${FULL} if using GPG
		else
			duplicity "${DEST}" "$restores_dir"/s3/ >$tmp_dir/duplicity-log 2>&1
		fi

		set -e

		trace "Backup for local filesystem complete"
		trace "------------------------------------"

		if [ "${1:-null}" = "backup" ]
		then

			# Send the daily log file by email
			#cat "$DAILYLOGFILE" | mail -s "Duplicity Backup Log for $HOST - $DATE" $MAILADDR
			#BACKUPSTATUS=`cat "$DAILYLOGFILE" | grep Errors | awk '{ print $2 }'`
			BACKUPSTATUS=$(cat "$DAILYLOGFILE" | grep -i error | wc -l)
			if [ "$BACKUPSTATUS" != "0" ]
			then
				cat "$DAILYLOGFILE" | mail -aFrom:"$scriptname@$HOST" -s "ERROR in $scriptname backup for $HOST on $DATE" $MAILADDR
			elif [ "$FULL" = "full" ]
			then
				echo "$(date +%d%m%Y_%T) Full Back Done" >> $FULLBACKLOGFILE
			fi

		fi

		# Append the daily log file to the main log file
		cat "$DAILYLOGFILE" >> $LOGFILE

		# Reset the ENV variables. Don't need them sitting around
		unset AWS_ACCESS_KEY_ID
		unset AWS_SECRET_ACCESS_KEY
		unset PASSPHRASE

	fi

}



os-br_backup_to_S3() {

	echo "${b}Now backing up to S3...${x}"
	echo

	os-br_duplicity_loop backup

	### Also upload today's full backup file to S3 if s3_monthly_uploads=y [only if this is NOT a manual run]

	today_day_of_month="$(date +%-d)"

	if [ $today_day_of_month = "1" ] && [ $interactive = "n" ]
	then
		echo "${b}Now copying $backups_archive_dir/$backup_name.tar.bz2 to S3 as well."
		echo

		encrypt() {
			gpg --output  /$tmp_dir/$@ --passphrase "$backups_passphrase" --symmetric -z 9 --require-secmem --cipher-algo AES256 --s2k-cipher-algo AES256 --s2k-digest-algo SHA512 --s2k-mode 3 --s2k-count 65000000 --compress-algo BZIP2 $@
		}

		decrypt() {
			gpg $@
		}

		putS3 () {
			path=$1
			file=$2
			aws_path=$3
			bucket="$s3_bucket_name"
			date=$(date +"%a, %d %b %Y %T %z")
			acl="x-amz-acl:public-read"
			content_type='application/x-compressed-tar'
			string="PUT\n\n$content_type\n$date\n$acl\n/$bucket$aws_path$file"
			signature=$(echo -en "${string}" | openssl sha1 -hmac "${awssak}" -binary | base64)
			curl -X PUT -T "$path/$file" \
			-H "Host: $bucket.s3.amazonaws.com" \
			-H "Date: $date" \
			-H "Content-Type: $content_type" \
			-H "$acl" \
			-H "Authorization: AWS ${awsaki}:$signature" \
			"https://$bucket.s3.amazonaws.com$aws_path$file"
		}

		( cd $backups_archive_dir && encrypt $backup_name.tar.bz2 )
		putS3 /$tmp_dir/ $backup_name.tar.bz2 /ee-br/archive/

	fi

}



os-br_restore_from_S3() {

	if [ "${1:-null}" = "test" ]
	then
		echo "${b}Now testing restore from S3 to $restores_dir/s3/ to ensure existing backups integrity and passphrase match...${x}"
		echo
	else
		echo "${b}Now restoring from S3 to $restores_dir/s3/...${x}"
		echo
	fi

	echo "${b}This is going to take some time, especially if this is your first restore on this machine.${x}"
	echo
	echo "${b}Please let the process run, it won't print any output until its done.${x}"
	echo

	os-br_duplicity_loop restore

	if grep -q "No backup chains found" $tmp_dir/duplicity-log
	then

		if [ "${1:-null}" = "test" ]
		then
			# This is the first backup, all is good.
			echo "${b}First S3 backup detected. Skipping restore test...${x}"
			echo
		else
			# No backups found on server, something's wrong.
			echo "${r}${b}Restore from S3 failed.${x}"
			echo
			echo "${b}It appears there are no backups on the S3 server under the path: | $short_name/latest | [check | $tmp_dir/duplicity-log | for messages like: | ${r}No backup chains found${x}${b} |].${x}"
			echo
			echo "${b}Exiting...${x}"
			echo
			exit 1
		fi

	else

		if grep -q "gpg: decryption failed: bad key" $tmp_dir/duplicity-log || [ ! -d "$restores_dir"/s3/ ]
		then

			if [ "${1:-null}" = "test" ]
			then
				echo "${r}${b}Testing restore from S3 failed.${x}"
				echo
				echo "${b}This is likely due to an incorrect passphrase [check | $tmp_dir/duplicity-log | for messages like: | ${r}gpg: decryption failed: bad key${x}${b} |].${x}"
				echo
				echo "${b}If this is the case, you've likely changed your backups encryption passphrase on this machine between your last backup and this one.${x}"
				echo
				echo "${r}${b}Aborting backup as proceeding would cause your S3 backups to be encrypted with two or more encryption keys at the same time.${x}"
				echo
				echo "${b}This would render them unusable in the future should you ever need them.${x}"
				echo
				echo "${b}Edit the file | $install_dir/config | and set once again your previous encryption passphrase, then re-run this script.${x}"
				echo
				echo "${b}If you have lost your previous encryption passphrase, delete all your S3 backups and re-run this script to make an entirely new backup set encrypted solely with the currently specified passphrase.${x}"
				echo
				echo "${b}Exiting...${x}"
				echo
				exit 1
			else
				echo "${r}${b}Restore from S3 failed.${x}"
				echo
				echo "${b}This is likely due to an incorrect passphrase [check | $tmp_dir/duplicity-log | for messages like: | ${r}gpg: decryption failed: bad key${x}${b} |].${x}"
				echo
				echo "${b}Edit the file | $install_dir/config | and replace the currently specified passphrase with the old one from your previous machine, then re-run this script.${x}"
				echo
				echo "${b}If you have lost your previous encryption passphrase, you've also lost access to your backups.${x}"
				echo
				echo "${b}Exiting...${x}"
				echo
				exit 1
			fi

		else

			if [ "${1:-null}" = "test" ]
			then
				echo "${g}${b}Restore test succeded. Proceeding...${x}"
				echo
			else
				echo "${g}${b}Restore succeded.${x}"
				echo
			fi

		fi

	fi

}
