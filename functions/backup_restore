#!/usr/bin/env bash

set -eu

dna-br_update_storage_info() {

	free_disk_space="$(df -m --output=avail "$backup_local_storage_path" | xargs | sed -e 's/Avail //g')"
	ref_dir_size="$(du -sm "$backup_ref_dir" | xargs | sed -e "s|"${backup_ref_dir}"||g" | xargs)"

	est_backup_size=$(($ref_dir_size * 2))

	local_archive_items="$(ls -1q $backup_local_storage_path/archive | wc -l)"
	local_archive_size="$(du -sm $backup_local_storage_path/archive | xargs | sed "s|${backup_local_storage_path}/archive||g" | xargs)"

}

dna-br_purge_loop() {

	if [ $local_archive_items -gt $min_local_backups ]
	then

		counter=$(($counter - 1))

		### Prevent infinite loops in case of rm failure

		if [ $counter = -1 ]
		then
			echo "${r-}${b-}Infinite loop error caught. Exiting...${b-}"
			exit 1
		fi

		if [ $local_archive_items -gt $counter ]
		then
			tail_number=$(( $counter + 1 ))
			( cd "$backup_local_storage_path/archive" && ls -t | tail -n +"$tail_number" | xargs -d '\n' rm )
		fi

		dna-br_update_storage_info

	else

		if [ $counter = 0 ]
		then

			echo "${r-}${b-}Even though there are no backups currently archived in local storage, meeting your setting of minimum backups to keep at | 0 |, there still isn't enough storage on the local storage's [$backup_local_storage_path] underlying volume.${x-}"
			echo
			echo "${b-}Please inspect your disk for any files you don't need, or consider using an[other] external location by re-running the installer and choosing | custom | for the | backup_local_storage_location | setting.${x-}"
			echo

		else

			echo "${r-}${b-}The specified number of minimum backups to keep [$min_local_backups] is too high $error_description.${x-}"
			echo
			echo "${b-}Lower this figure by re-running the install and lowering this figure during configuration or make more space available on this machine.${x-}"
			echo

		fi

		if [ -d "$backup_local_storage_path/archive/old" ]
		then

			old_dir_size="$(du -sm "$backup_local_storage_path/archive/old" | xargs | sed -e "s|"${backup_local_storage_path}/archive/old"||g" | xargs)"

			echo "${b-}Found | $backup_local_storage_path/archive/old | directory weighing | $old_dir_size |.${x-}"
			echo
			echo "${b-}Consider freeing up space by removing these old backups if unneeded.${x-}"
			echo

		fi

		dna-exit

	fi

}

dna-br_purge_backups() {

	### Purge backups older than the latest $max_local_backups

	local_archive_items="$(ls -1q $backup_local_storage_path/archive | wc -l)"
	if [ $local_archive_items -gt $max_local_backups ]
	then
		tail_number=$(( $max_local_backups + 1 ))
		( cd "$backup_local_storage_path/archive" && ls -t | tail -n +"$tail_number" | xargs -d '\n' rm )
		dna-br_update_storage_info
	fi

	echo "${b-}You have $local_archive_items local backups occupying $local_archive_size MB of space.${x-}"
	echo

	if [ $local_archive_size -gt $max_local_storage ]
	then

		echo "${r-}${b-}Local archive size [$local_archive_size MB] LARGER than | max_local_storage | setting [$max_local_storage MB].${x-}"
		echo
		echo "${b-}Now purging old backups while respecting your specified number of minimum backups to keep...${x-}"
		echo
		error_description="to stay below the | max_local_storage | setting you chose"

		counter=$max_local_backups

		while [ $local_archive_size -gt $max_local_storage ]
		do
			dna-br_purge_loop
		done

		echo "${g-}${b-}Local archive size now low enough [$local_archive_size MB] to respect your settings.${x-}"
		echo
		echo "${b-}Purged all backups older than the most recent | $counter |.${x-}"
		echo
		echo "${b-}Continuing...${x-}"
		echo

	fi

	if [ $est_backup_size -gt $free_disk_space ]
	then

		echo "${r-}${b-}Estimated backup size [$est_backup_size MB] LARGER than available disk space [$free_disk_space MB].${x-}"
		echo
		echo "${b-}Now purging old backups while respecting your specified number of minimum backups to keep...${x-}"
		echo
		error_description="to free enough disk space for the next backup"

		counter=$max_local_backups

		while [ $est_backup_size -gt $free_disk_space ]
		do
			dna-br_purge_loop
		done

		echo "${g-}${b-}Enough free space [$free_disk_space MB] now available for new backup.${x-}"
		echo
		echo "${b-}Purged all backups older than the most recent | $counter |.${x-}"
		echo
		echo "${b-}Continuing...${x-}"
		echo

	fi

}

dna-br_purge_dirs() {

	### Purge temp and create directories

	if [ -d "$backup_local_storage_path/temp" ]
	then
		rm -r "${backup_local_storage_path:?}/temp"
	fi

	if [ -d "$backup_local_storage_path/latest" ]
	then
		rm -r "${backup_local_storage_path:?}/latest"
	fi

	if [ -d "$backup_local_storage_path/restores" ]
	then
		rm -r ${backup_local_storage_path:?}/restores
	fi

}

dna-br_create_dirs() {

	if [ "${1:-null}" = "backup" ]
	then

		mkdir -p "$backup_local_storage_path/archive"
		mkdir -p "$backup_local_storage_path/latest"
		backup_name=$script_name-$now
		tmp_backup_dir="$backup_local_storage_path/temp/$backup_name"
		mkdir -p "$tmp_backup_dir"

	fi

	mkdir -p "$backup_local_storage_path/temp"

}

dna-br_purge_incomplete_archives() {

	if [ -d "$backup_local_storage_path/archive" ]
	then
		find "$backup_local_storage_path/archive" -type f -name '*.incomplete' -delete
	fi

}

dna-br_backup_locally() {

    while getopts ":ls" arguments; do
		case $arguments in
			l)	last="y"
			;;
			s)	skip_install_complete_check="y"
			;;
			\?)	echo "${r-}${b-}Invalid option | -$OPTARG | for function | ${FUNCNAME[0]} |.${x-}"
			echo
			dna-exit
			;;
		esac
	done
    OPTIND=1

    ### backup_locally_loop is project-specific and must be defined before calling this function

    echo "${b-}Now backing up locally...${x-}"
	echo

	if [ ! ${skip_install_complete_check-null} = "y" ]
	then

		### Abort if the current installation was never completed

		dna-check_install_complete

		if [ $install_complete = "n" ]
		then
			echo "${r-}${b-}It appears $proj_name is not currently installed or there is an incomplete installation on this machine.${x-}"
	        echo
	        echo "${b-}This backup script only works on a fully installed $proj_name instance.${x-}"
	        echo
	        echo "${b-}Please finish installing $proj_name before running this script.${x-}"
	        echo
			dna-exit
		fi

	fi

    backup_locally_loop

    echo "${b-}Now archiving backup...${x-}"
	echo

	cd "$backup_local_storage_path/temp"

    if [ ! ${last-null} = "y" ]
	then

    	### Tar [and - if chosen - bzip2] this backup archive.

		if [ "$backup_compression_type" = "bz2" ]
		then
			output_file_name="$backup_name.tar.bz2"
			output_file_path="$backup_local_storage_path/archive/${output_file_name}"
	    	tar cSf - $backup_name -P | pv -s $(du -sb $backup_name | awk '{print $1}') | bzip2 > "${output_file_path}.incomplete"
		else
			output_file_name="$backup_name.tar"
			output_file_path="$backup_local_storage_path/archive/${output_file_name}"
			tar cSf - $backup_name -P | pv -s $(du -sb $backup_name | awk '{print $1}') > "${output_file_path}.incomplete"
		fi

    else

        ### Tar [and - if chosen - bzip2] this backup archive. Give local backup a custom name so that it's clear it's the last one before a restore

		if [ "$backup_compression_type" = "bz2" ]
		then
			output_file_name="$backup_name-last-backup-before-$now-restore.tar.bz2"
			output_file_path="$backup_local_storage_path/archive/${output_file_name}"
	    	tar cSf - $backup_name -P | pv -s $(du -sb $backup_name | awk '{print $1}') | bzip2 > "${output_file_path}.incomplete"
		else
			output_file_name="$backup_name-last-backup-before-$now-restore.tar"
			output_file_path="$backup_local_storage_path/archive/${output_file_name}"
			tar cSf - $backup_name -P | pv -s $(du -sb $backup_name | awk '{print $1}')> "${output_file_path}.incomplete"
		fi

    fi

	echo

	mv "${output_file_path}.incomplete" "${output_file_path}"

	echo "${g-}${b-}Finished archiving backup and storing it in: | $backup_local_storage_path/archive/ | ${x-}"
	echo

	echo "${g-}${b-}Finished local backup.${x-}"
	echo

}

dna-br_last_local_backup() {

    echo "${b-}Now performing a last backup [locally - no S3 of course] this machine's currently running $proj_name installation just in case...${x-}"
	echo

	dna-br_create_dirs backup

	dna-br_update_storage_info noS3

	dna-br_purge_backups

	dna-br_backup_locally last

	### If not restoring a previous state of this same installation, then move the backups directory to an "old" named one.

	if [ $restore_source = "here" ]
	then

		echo "${b-}Backed up current installation to | $backup_local_storage_path/archive |.${x-}"
		echo

	else

		mkdir -p "$backup_local_storage_path"/old
		mv "$backup_local_storage_path/archive" "$backup_local_storage_path/old/archive-old-before-$now-restore"

		if [ ! -z "${duplicity_log_dir-}" ]
		then
			mkdir -p "$duplicity_log_dir"/old
			mv "$duplicity_log_dir"/backup/ "$duplicity_log_dir"/old/backup-old-before-"$now"-restore 2> /dev/null || true
		fi

		echo "${b-}Backed up current installation to local backups directory and moved the latter to $backup_local_storage_path/old/archive-old-before-$now-restore.${x-}"
		echo
	fi

}

dna-br_restore_from_here() {

	if [ ! -d "$backup_local_storage_path/archive" ]
	then
		echo "${r-}${b-}Local backups directory [$backup_local_storage_path/archive] not found.${x-}"
		echo
		echo "${b-}It's possible you've already partially run this restore script choosing the | elsewhere | option, or that this machine never successfully ran a backup.${x-}"
		echo
		echo "${b-}Check your $install_dir for a directory called | backups(-[something]) | and if you find something rename the most recently datestamped directory to | backups | ."
		echo
		echo "${b-}Exiting...${x-}"
		echo
		exit 1
	fi

	count="$(ls -1 $backup_local_storage_path/archive/*.tar* 2>/dev/null | wc -l)"
	if [ $count = 0 ]
	then
		echo "${r-}${b-}No backup archives found in local backups directory [$backup_local_storage_path/archive].${x-}"
		echo
		echo "${b-}It's possible you've already partially run this restore script choosing the | elsewhere | option, or that this machine never successfully ran a backup.${x-}"
		echo
		echo "${b-}Check your $install_dir for a directory called | backups(-[something]) | and if you find something rename the most recently datestamped directory to | backups | ."
		echo
		echo "${b-}Exiting...${x-}"
		echo
		exit 1
	fi

	echo "${b-}These are the backup dates available for restore:${x-}"
	echo
	ls -1 "$backup_local_storage_path/archive" | sed -e "s/${proj_name}-backup-//g" | sed -e 's/.tar//g' | sed -e 's/.bz2//g'
	echo
	read -rp "${b-}[press enter to continue...]${x-}"
	clear

	choice="${b-}Now choose the file you'd like to restore: ${x-}"
	echo "$choice"
	echo

	set +u

	cd "$backup_local_storage_path/archive"
	unset options i
	while IFS= read -r -d $'\n' f; do
		options[i++]="$f"
	done < <(find ./ -maxdepth 1 -type f -name "*.tar*" | sort -r )
	IFS=$' \t\n'

	set -u

	accept=n
	until [ $accept = "y" ]
	do

		select sel_backup_file in "${options[@]}" "exit"
		do
			echo
			case $sel_backup_file in
				*.tar)
				echo "${b-}Backup file $sel_backup_file selected.${x-}"
				break
				;;
				"exit")
				echo "${b-}Exiting...${x-}"
				echo
				exit
				;;
				*)
				echo "${r-}${b-}Invalid option. Retry...${x-}"
				echo
				;;
			esac
		done
		echo

		valid=n
		until [ $valid = "y" ]
		do
			read -n 1 -rp "${b-}Is this the correct file?${x-} (${b-}Y${x-}[es]/${b-}n${x-}[o]/${b-}e${x-}[xit]) " answer;
			case $answer in
				"")
				echo
				valid=y
				accept=y
				;;
				y)
				echo -e "\\n"
				valid=y
				accept=y
				;;
				n)
				echo -e "\\n"
				echo "${b-}No problem, please select your desired file again now...${x-}"
				echo
				valid=y
				accept=n
				;;
				e)
				echo -e "\\n"
				echo "${b-}Exiting...${x-}"
				echo
				exit
				;;
				*)
				echo -e "\\n"
				echo "${b-}Invalid option. Retry...${x-}"
				echo
				valid=n
				accept=n
				;;
			esac
		done

	done

	mkdir -p "$backup_local_storage_path/restores/local/"

	if [ ${sel_backup_file: -4} == ".bz2" ]
	then
		tar -xvjf "$sel_backup_file" -C "$backup_local_storage_path/restores/local/"
	else
		tar -xvf "$sel_backup_file" -C "$backup_local_storage_path/restores/local/"
	fi

	echo

}

dna-br_restore_from_standalone() {

	echo "${b-}Ok, restoring from a standalone $proj_name backup file.${x-}"
	echo
	mkdir -p "/root/$proj_name-restore/"
	read -p "${b-}Do you have a file called | $proj_name-backup-[date].tar[.bz2] | [or similar]? (Y/n): ${x-}" -n 1 -r
	echo
	if [[ ! $REPLY =~ ^[Nn]$ ]]
	then
		defined=n
		until [ $defined = "y" ]
		do
			exists=n
			until [ $exists = "y" ]
			do
				standalone_backup_file=""
				until [ ! $standalone_backup_file = "" ]
				do
					read -rp "${b-}Ok, specify the path to that file now: ${x-}" standalone_backup_file
					echo
				done
				if [ -f "$standalone_backup_file" ]
				then
					exists=y
				else
					echo "${r-}${b-}The specified file does not exists. Please retry...${x-}"
					echo
					exists=n
				fi
			done
			valid=n
			until [ $valid = "y" ]
			do
				read -n 1 -rp "${b-}Is | $standalone_backup_file | correct? (Y/n/e[xit]) ${x-}" answer;
				case $answer in
					"")
					echo
					valid=y
					defined=y
					;;
					y)
					echo -e "\\n"
					valid=y
					defined=y
					;;
					n)
					echo -e "\\n"
					echo "${b-}Ok, then please try again...${x-}"
					echo
					valid=y
					defined=n
					;;
					e)
					echo -e "\\n"
					echo "${b-}Exiting...${x-}"
					echo
					exit
					;;
					*)
					echo -e "\\n"
					echo "${r-}${b-}Invalid option. Retry...${x-}"
					echo
					valid=n
					defined=n
					;;
				esac
			done
		done
		echo "${b-}Backup file $standalone_backup_file selected.${x-}"
		echo
		if [ ${standalone_backup_file: -4} == ".bz2" ]
		then
			tar -xvjf "$standalone_backup_file" -C "/root/$proj_name-restore/"
		else
			tar -xvf "$standalone_backup_file" -C "/root/$proj_name-restore/"
		fi
		subdir=("/root/$proj_name-restore/"*/)
		restoresubdir="$(echo "$subdir" | sed "s|/root/${proj_name}-restore/||" | tr -d '/')"
		mv "/root/$proj_name-restore/$restoresubdir"/* "/root/$proj_name-restore/"
		rm -r "/root/$proj_name-restore/$restoresubdir"
	else
		echo
		echo "${b-}Ok, no problem. Make sure you populate the | /root/$proj_name-restore/ | directory with the following files/directories from your standalone backup:${x-}"
		echo
		restore_from_standalone_content_description
		echo
		echo "${r-}${b-}If you don't correctly place all the above files/directories, the restore will not work correctly [you will be alerted if something is wrong further along this script]${x-}"
		echo
		echo "${b-}As soon as you're done moving these items into place...${x-}"
		echo
		read -rp "${b-}[press enter to continue...]${x-}"
		clear
		if [ $validate_standalone_restore_content = "y" ]
		then
			restore_from_standalone_content_validation
		fi
	fi

}

dna-br_duplicity_loop() {

	### Raise ulimit for open files

	if ! grep -q "fs.file-max = 2097152" "/etc/sysctl.conf"
	then
		echo "fs.file-max = 2097152" >> "/etc/sysctl.conf"
	fi

	standard_ulimit_n="$(ulimit -n)"
	ulimit -n "524288"

	# Export some ENV variables so you don't have to type anything
	export AWS_ACCESS_KEY_ID=$s3_access_key_id
	export AWS_SECRET_ACCESS_KEY=$s3_secret_access_key
	export PASSPHRASE=$backups_passphrase

	# Your GPG key
	#GPG_KEY= # Insert GPG key here if using GPG

	# The S3 destination followed by bucket name
	DEST="s3://$s3_endpoint/$s3_bucket_name/$proj_name/latest/"

	HOST=$(hostname)
	DATE=$(date +%Y-%m-%d)
	MAILADDR="${admin_mail-null}"
	TODAY=$(date +%d%m%Y)

	if [ "${1:-null}" = "backup" ]
	then
		duplicity_type="backup"
	else
		duplicity_type="restore"
	fi

	duplicity_base_dir=/root/logs/$proj_name-duplicity
	duplicity_log_dir=$duplicity_base_dir/$duplicity_type

	# Set up some variables for logging
	LOGFILE="$duplicity_log_dir/$duplicity_type.log"
	DAILYLOGFILE="$duplicity_log_dir/$duplicity_type.daily.log"
	FULLBACKLOGFILE="$duplicity_log_dir/$duplicity_type.full.log"

	is_running=$(ps -ef | grep duplicity  | grep python | wc -l)

	if [ ! -d $duplicity_log_dir ]
	then
		mkdir -p $duplicity_log_dir
	fi

	if [ ! -f $FULLBACKLOGFILE ]
	then
		touch $FULLBACKLOGFILE
	fi

	if [ "$is_running" -eq 0 ]
	then
		# Clear the old daily log file
		cat /dev/null > ${DAILYLOGFILE}

		# Trace function for logging, don't change this
		trace() {
			stamp=$(date +%Y-%m-%d_%H:%M:%S)
			echo "$stamp: $*" >> ${DAILYLOGFILE}
		}

		if [ "${1:-null}" = "backup" ]
		then

			# The source of your backup
			SOURCE="$backup_local_storage_path/latest/" # Use / for full system backup [not the case here]

		fi

		FULL=
		tail -1 "${FULLBACKLOGFILE}" | grep "${TODAY}" > /dev/null || true
		if [ $? -ne 0 -a "$(date +%d)" -eq 1 ]
		then
			FULL=full
		fi;

		trace "Backup for local filesystem started"

		set +e

		if [ "${1:-null}" = "backup" ]
		then

			# How long to keep backups for
			OLDER_THAN="$duplicity_min_history"

			trace "... removing old backups"

			duplicity remove-older-than "${OLDER_THAN}" "${DEST}" >> "${DAILYLOGFILE}" 2>&1  || true

		fi

		trace "... backing up filesystem"

		#    duplicity \
		#        ${FULL} \
		#        --encrypt-key=${GPG_KEY} \
		#        --sign-key=${GPG_KEY} \
		#        --include=/var/rsnap-mysql \
		#        --include=/var/www \
		#        --include=/etc \
		#        --exclude=/** \
		#        ${SOURCE} ${DEST} >> ${DAILYLOGFILE} 2>&1

		if [ "${1:-null}" = "backup" ]
		then
			duplicity --progress --allow-source-mismatch ${FULL} "${SOURCE}" "${DEST}" # Insert --encrypt-key and --sign-key after ${FULL} if using GPG
		else
			duplicity "${DEST}" "$backup_local_storage_path/restores/s3/" 2>&1 | tee "$backup_local_storage_path/temp/duplicity-log"
		fi

		set -e

		trace "Backup for local filesystem complete"
		trace "------------------------------------"

		if [ "${1:-null}" = "backup" ]
		then

			# Send the daily log file by email
			#cat "$DAILYLOGFILE" | mail -s "Duplicity Backup Log for $HOST - $DATE" $MAILADDR
			#BACKUPSTATUS=`cat "$DAILYLOGFILE" | grep Errors | awk '{ print $2 }'`
			BACKUPSTATUS=$(cat "$DAILYLOGFILE" | grep -i error | wc -l)
			if [ "$BACKUPSTATUS" != "0" ]
			then
				cat "$DAILYLOGFILE" | mail -aFrom:"$script_name@$HOST" -s "ERROR in $script_name backup for $HOST on $DATE" $MAILADDR
			elif [ "$FULL" = "full" ]
			then
				echo "$(date +%d%m%Y_%T) Full Back Done" >> $FULLBACKLOGFILE
			fi

		fi

		# Append the daily log file to the main log file
		cat "$DAILYLOGFILE" >> $LOGFILE

		# Reset the ENV variables. Don't need them sitting around
		unset AWS_ACCESS_KEY_ID
		unset AWS_SECRET_ACCESS_KEY
		unset PASSPHRASE

	else

		echo "${r-}${b-}It appears duplicity is already running on this server.${x-}"
		echo
		echo "${b-}If you've manually overridden a lockfile check at the beginning of this script's execution, you should consider that it's likely another backup is occurring.${x-}"
		echo
		echo "${b-}If you're sure this is not the case, reboot the server and run this script again or see what happens at the next automated run.${x-}"
		echo
		dna-exit

	fi

	### Reset ulimit for open files

	ulimit -Sn "${standard_ulimit_n}"

}



dna-br_backup_to_S3() {

	echo "${b-}Now backing up to S3...${x-}"
	echo

    if [ -f "$conf_backups_s3_dir/block_s3_backups" ]
    then
        echo "${r-}${b-}NOT performing backup as | $conf_backups_s3_dir/block_s3_backups | file found.${x-}"
        echo
        echo "${b-}This should indicate that during installation you specified your intent to use this machine as a restore for a previous instance of $proj_name backed up on S3.${x-}"
        echo
        echo "${b-}If this is the case, simply run the restore script right away. If it is not, and you want to use this machine for a new installation and OVERWRITE all backups currently on S3, erase this file.${x-}"
        echo
        echo "${r-}${b-}NO backups will run on this instance until you perform the restore script or remove the file to specify your intent to use this machine as it is for a new installation.${x-}"
        echo
		dna-exit
    fi

	dna-br_duplicity_loop backup

	### Also upload today's full backup file to S3 if s3_monthly_uploads=y [only if this is NOT a manual run]

	today_day_of_month="$(date +%-d)"

	if [ $today_day_of_month = "1" ] && [ $interactive = "n" ]
	then
		echo "${b-}Now also performing duplicity-independent first-of-the-month upload of | "$output_file_name" | to S3 as well."
		echo

		encrypt() {
			echo "$backups_passphrase" | gpg --output  "$backup_local_storage_path/temp/$@.gpg" --passphrase-fd 0 --batch --yes --symmetric -z 9 --require-secmem --cipher-algo AES256 --s2k-cipher-algo AES256 --s2k-digest-algo SHA512 --s2k-mode 3 --s2k-count 65000000 --compress-algo BZIP2 $@
		}

		decrypt() {
			gpg $@
		}

		putS3() {
			path=$1
			file=$2
			aws_path=$3
			bucket="$s3_bucket_name"
			date=$(date +"%a, %d %b %Y %T %z")
			acl="x-amz-acl:public-read"
			content_type='application/x-compressed-tar'
			string="PUT\n\n$content_type\n$date\n$acl\n/$bucket$aws_path$file"
			signature=$(echo -en "${string}" | openssl sha1 -hmac "${s3_secret_access_key}" -binary | base64)
			curl -X PUT -T "$path/$file" \
			-H "Host: $bucket.$s3_endpoint" \
			-H "Date: $date" \
			-H "Content-Type: $content_type" \
			-H "$acl" \
			-H "Authorization: AWS ${s3_access_key_id}:$signature" \
			"https://${bucket}.${s3_endpoint}${aws_path}${file}"
		}

		( cd "$backup_local_storage_path/archive/" && encrypt "$output_file_name" )
		putS3 "$backup_local_storage_path/temp/" "$output_file_name.gpg" "/$proj_name/archive/" 2> /dev/null

	fi

}



dna-br_restore_from_S3() {

	if [ "${1:-null}" = "test" ]
	then
		echo "${b-}Now testing restore from S3 to $backup_local_storage_path/restores/s3/ to ensure existing backups integrity and passphrase match...${x-}"
		echo
	else
		echo "${b-}Now restoring from S3 to $backup_local_storage_path/restores/s3/...${x-}"
		echo
	fi

	echo "${b-}This is going to take some time and will NOT output any progress information until it's done.${x-}"
	echo

	dna-br_duplicity_loop restore

	if grep -q "No backup chains found" "$backup_local_storage_path/temp/duplicity-log"
	then

		if [ "${1:-null}" = "test" ]
		then
			# This is the first backup, all is good.
			echo "${g-}${b-}First S3 backup detected. Skipping restore test...${x-}"
			echo
		else
			# No backups found on server, something's wrong.
			echo "${r-}${b-}Restore from S3 failed.${x-}"
			echo
			echo "${b-}It appears there are no backups on the S3 server under the path: | $proj_name/latest | [check the above output for messages like: | ${r-}No backup chains found${x-}${b-} |].${x-}"
			echo
			echo "${b-}Exiting...${x-}"
			echo
			exit 1
		fi

	else

		if grep -q "gpg: decryption failed: bad key" "$backup_local_storage_path/temp/duplicity-log" || [ ! -d "$backup_local_storage_path/restores/s3/" ]
		then

			if [ "${1:-null}" = "test" ]
			then
				echo "${r-}${b-}Testing restore from S3 failed.${x-}"
				echo
				echo "${b-}Is appears this instance of $proj_name has on file an incorrect S3 encryption passphrase [check the above output for messages like: | ${r-}gpg: decryption failed: bad key${x-}${b-} |].${x-}"
				echo
				echo "${b-}If this is the case, you've likely changed your backups encryption passphrase on this machine between your last backup and this one.${x-}"
				echo
				echo "${b-}This would cause S3 backups to be encrypted with two or more encryption keys at the same time, which would render them unusable in the future should you ever need them.${x-}"
				echo
				echo "${b-}Edit the file | $conf_backups_s3_dir/backups_passphrase | and set once again your previous encryption passphrase, then re-run this script.${x-}"
				echo
				echo "${b-}If you have lost your previous encryption passphrase, delete all your S3 backups and re-run this script to make an entirely new backup set encrypted solely with the currently specified passphrase.${x-}"
				echo
				echo "${r-}${b-}Aborting S3 backup because of connection / integrity check failure.${x-}"
				echo
				if [ $interactive = "y" ]
				then
					read -rp "${b-}Would you like to continue with a local-only backup anyway? (Y/n): ${x-}" -n 1
					echo
					if [[ ! $REPLY =~ ^[Nn]$ ]]
					then
						echo "${b-}Ok, continuing with local-only backup...${x-}"
						echo
						export s3_restore_test_failed=y
					else
						echo
						echo "${b-}Ok, aborting.${x-}"
						echo
						dna-exit
					fi
				else
					echo "${b-}Continuing with local-only backup anyway...${x-}"
					echo
					export s3_restore_test_failed=y
				fi
			else
				echo "${r-}${b-}Restore from S3 failed.${x-}"
				echo
				echo "${b-}Is appears this instance of $proj_name has on file an incorrect S3 encryption passphrase [check the above output for messages like: | ${r-}gpg: decryption failed: bad key${x-}${b-} |].${x-}"
				echo
				echo "${b-}Edit the file | $conf_backups_s3_dir/backups_passphrase | and replace the currently specified passphrase with the old one from your previous machine, then re-run this script.${x-}"
				echo
				echo "${b-}If you have lost your previous encryption passphrase, you've also lost access to your backups.${x-}"
				echo
				echo "${b-}Exiting...${x-}"
				echo
				exit 1
			fi

		else

			echo
			if [ "${1:-null}" = "test" ]
			then
				echo "${g-}${b-}S3 Restore test succeded. Proceeding with S3 backup...${x-}"
				echo
			else
				echo "${g-}${b-}Restore succeded.${x-}"
				echo
			fi

		fi

	fi

}

dna-br_launch_restore() {

	while getopts ":s" arguments; do
		case $arguments in
			s)	restore_type=s3
				skip_questions=y
				restore_source=elsewhere
			;;
			\?)	echo "${r-}${b-}Invalid option | -$OPTARG | for function | ${FUNCNAME[0]} |.${x-}"
			echo
			dna-exit
			;;
		esac
	done
    OPTIND=1

	if [ ! ${skip_questions-null} = "y" ]
	then

	    choice="${b-}Is the backup you're trying to restore stored locally on this machine [i.e. you're trying to restore a previous state of this running instance of $proj_name] or is it stored elsewhere [i.e. you're changing machine or your previous machine's data was wiped or lost]? ${x-}"
	    echo "$choice"
	    echo
	    options=("backup file stored locally" "backup file stored elsewhere" "exit")
	    select opt in "${options[@]}"
	    do
	    	echo
	    	case $opt in
	    		"backup file stored locally")
	    		export restore_source=here
	    		break
	    		;;
	    		"backup file stored elsewhere")
	    		export restore_source=elsewhere
	    		break
	    		;;
	    		"exit")
	    		echo "${b-}Exiting...${x-}"
	    		echo
	    		exit
	    		;;
	    		*)
	    		echo "${r-}${b-}Invalid option. Retry...${x-}"
	    		echo
	    		;;
	    	esac
	    done

	    if [ $restore_source = "here" ]
	    then

	    	dna-br_restore_from_here

	    else

	    	if [ "${backup_archival_location-null}" = "s3" ]
	    	then
	    		echo "${b-}You've previously set up an S3 file storage server connection on this machine.${x-}"
	    		echo
	    		choice="${b-}Do you want to restore from S3 or from a standalone $proj_name backup file you have stored individually? ${x-}"
	    		echo "$choice"
	    		echo
	    		options=("S3" "standalone" "exit")
	    		select opt in "${options[@]}"
	    		do
	    			echo
	    			case $opt in
	    				"S3")
	    				export restore_type=s3
	    				break
	    				;;
	    				"standalone")
	    				export restore_type=standalone
	    				break
	    				;;
	    				"exit")
	    				echo "${b-}Exiting...${x-}"
	    				echo
	    				exit
	    				;;
	    				*)  echo "${r-}${b-}Invalid option. Retry...${x-}"
	    				echo
	    				;;
	    			esac
	    		done
	    	else
	    		export restore_type=standalone
	    	fi

			if [ $restore_type = "s3" ]
			then

				dna-br_restore_from_S3

			else

				dna-br_restore_from_standalone

				echo

			fi

		fi

	else

		dna-br_restore_from_S3

	fi

    if [ $restore_source = "here" ]
    then
    	export restore_file_name="$(echo "$sel_backup_file" | sed 's|./||g' | sed 's/-last-backup.*-restore//' | sed 's/.tar//g' | sed 's/.bz2//g')"
    	export restore_file_path="$backup_local_storage_path/restores/local/$restore_file_name"
    else
    	if [ $restore_type = "s3" ]
    	then
    		export restore_file_path="$backup_local_storage_path/restores/s3"
    	else
    		export restore_file_path="/root/$proj_name-restore"
    	fi
    fi

	unset skip_questions

}
