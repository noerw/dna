#!/usr/bin/env bash

dna-set_locale() {

    dna-echo -m "Now setting locale | ${y-}en_US.UTF-8${n-} |...${x-}"
    export LC_ALL="en_US.UTF-8"
    echo "LC_ALL=en_US.UTF-8" > /etc/default/locale
    dna-echo -s "Locale set."

}

dna-set_ssh_pubkey() {

    dna-echo -m "Now installing your SSH public key."

    if [ -f "${ssh_auth_keys_file}" ]
    then
        dna-echo -s "SSH Authorized Keys file found."
        ssh_auth_keys_contents="$(cat ${ssh_auth_keys_file})"
        dna-echo -m "Its content is currently:"
        echo "${ssh_auth_keys_contents}"
        echo
    else
    	dna-echo -m "SSH Authorized Keys file NOT found. Creating it now..."
    	mkdir -p "/root/.ssh/"
        touch "${ssh_auth_keys_file}"
    fi

    chown "root:root" "${ssh_auth_keys_file}"
    chmod "600" "${ssh_auth_keys_file}"

    read -rp "${b-}Set public key now? (Y/n): ${x-}" -n 1 -r
    echo

    if [[ ! $REPLY =~ ^[Nn]$ ]]
    then
    	defined=n
    	until [ "${defined}" = "y" ]
    	do
    		new_ssh_pub_key=""
    		until [ ! "${new_ssh_pub_key}" = "" ]
    		do
    			read -rp "${b-}Ok, now paste the ssh public key you copied from your local workstation here: ${x-}" new_ssh_pub_key
    			echo
    		done
    		valid=n
    		until [ $valid = "y" ]
    		do
    			read -n 1 -p "${b-}Is it correct? (Y/n/e[xit]) ${x-}" answer;
    			case $answer in
                "") echo
                    valid=y
    				defined=y
    				;;
    			y)
    				echo -e "\n"
    				valid=y
    				defined=y
    				;;
    			n)
    				echo -e "\n"
    				dna-echo -m "Ok, then please try again..."
    				valid=y
    				defined=n
    				;;
    			e)
    				echo -e "\n"
    				dna-exit
    				;;
    			*)
    				echo -e "\n"
    				dna-echo -e "Invalid option. Retry..."
    				valid=n
    				defined=n
    				;;
    			esac
    		done
    	done
    	chmod 600 "${ssh_auth_keys_file}"
    	echo "${new_ssh_pub_key}" > "${ssh_auth_keys_file}"
    	dna-echo -s "SSH Public key set."
    else
    	echo
    	dna-echo -m "Skipping SSH key setting."
    fi

}

dna-harden_ssh() {

    dna-echo -m "Now setting SSH hardened values..."

    sed -i "/PermitRootLogin/c\PermitRootLogin without-password" "${ssh_config_file}"

    dna-echo -m "Set | ${o-}PermitRootLogin${n-} | to ${y-}without-password${n-} |."

    sed -i "/PasswordAuthentication/c\PasswordAuthentication no" "${ssh_config_file}"

    dna-echo -m "Set | ${o-}PasswordAuthentication${n-} | to | ${y-}no${n-} |."

    dna-echo -m "Now checking current SSH port setting..."

    if grep -Fq "Port " "${ssh_config_file}"
    then

    	dna-echo -m " | ${o-}Port${n-} | line found."

    	if grep -Eq '^ *Port ' "${ssh_config_file}"
    	then

    		dna-echo -m " | ${o-}Port${n-} | syntax correct."

    		if grep -Eq '^ *Port 42022' "${ssh_config_file}"
    		then

    			dna-echo -m " | ${o-}Port${n-} | already set to | ${y-}42022${n-} |."
    			ssh_port="42022"

    		else

    			curr_ssh_port="$(grep '^ *Port *' ${ssh_config_file} | sed 's|Port ||g')"

    			dna-echo -m "SSH port currently set to: | ${y-}${curr_ssh_port}${n-} |."

    			read -rp "${b-}Change it to 42022? (Y/n): ${x-}" -n 1 -r
    			echo

    			if [[ ! $REPLY =~ ^[Nn]$ ]]
    			then

    				dna-echo -m "Ok, changing SSH Port to 42022"

    				sed -i "/Port /c\Port 42022" "${ssh_config_file}"

    				dna-echo -s "SSH Port changed to 42022"

    				ssh_port="42022"

    			else

    				dna-echo -m "Leaving SSH port set to: | ${y-}${curr_ssh_port}${x-} |."

    				ssh_port="${curr_ssh_port}"

    			fi

    		fi

    	else

            dna-echo -e " | ${n-}Port${r-} | syntax abnormal [commented, or other]. Fixing it now."

    		read -rp "${b-}Also set it to 42022? (Y/n): ${n-}" -n 1 -r
    		echo

    		if [[ ! $REPLY =~ ^[Nn]$ ]]
            then

                dna-echo -m "Ok, fixing syntax and setting | ${o-}Port${n-} | to | ${y-}42022${n-} |."

                sed -i "/Port /c\Port 42022" "${ssh_config_file}"

    			dna-echo -m "Line re-inserted with | ${o-}Port${n-} | set to | ${y-}42022${n-} |."

    			ssh_port="42022"

    		else

    			echo

    			dna-echo "Ok, fixing syntax but leaving | ${o-}Port${n-} | set to | ${y-}22${n-} [standard] |."

                sed -i "/Port /c\Port 22" "${ssh_config_file}"

    			dna-echo -m "Line re-inserted with | ${o-}Port${n-} | set to | ${y-}22${n-} [standard] |."

    			ssh_port="22"

	        fi

    	fi

    else

        dna-echo -e " | ${n-}Port${r-} | line not found. Adding it now."

    	read -rp "${b-}Also set it to 42022? (Y/n): ${x-}" -n 1 -r
        echo

        if [[ ! $REPLY =~ ^[Nn]$ ]]
        then

            dna-echo -m "Ok, adding | ${o-}Port${n-} | line and setting it to | ${y-}42022${n-} |."

    		sed -i '1iPort 42022' "${ssh_config_file}"

            dna-echo -m "Line added with | ${o-}Port${n-} | set to | ${y-}22${n-} [standard] |."

    		ssh_port="42022"

        else

    		echo

            dna-echo -m "Ok, adding | ${o-}Port${n-} | line but leaving it set to | ${y-}22${n-} [standard] |."

    		sed -i '1iPort 22' "${ssh_config_file}"

            dna-echo -m "Line added with | ${o-}Port${n-} | set to | ${y-}22${n-} [standard] |."

    		ssh_port="22"

        fi

    fi

    mkdir -p "${os_conf_dir}"
    echo "${ssh_port}" > "${os_conf_dir}/ssh-port"

}

dna-initialize_ufw() {

    dna-read_conf_settings

    dna-echo -m "Now installing UFW, setting | ${y-}limit ${ssh_port}${n-} |, and enabling."

    dna-install_dependencies -p "ufw"

    dna-echo -m "Allowing port | ${y-}${ssh_port}${n-} |."

    ufw limit "${ssh_port}"
    echo

    if [ ! "${ssh_port}" = "22" ]
    then

    	dna-echo -m "Also allowing port | ${y-}22${n-} | [for existing SSH sessions]."

    	ufw limit 22
    	echo

    fi

    dna-echo -m "Enabling UFW."

    ufw --force enable
    echo

    dna-echo -s "Finished installing and enabling UFW"

}

dna-prompt_ssh_connection_test() {

    ### Restart SSH

    /usr/sbin/service ssh restart

    ### Prompt for test SSH connection

    dna-echo -m "It's now time to ensure that your SSH configuration on this machine is correct."
    dna-echo -m "Now open a new SSH session to this machine from your workstation with the SSH keypair and SSH port you previously entered and chose."

    ask_for_boolean_question="Has the new SSH session worked?"
    dna-ask_for_boolean_def_no

    if [ "$ask_for_boolean_output" = "y" ]
    then

        dna-echo -m "Ok, you can now close the other test session, and come back to this one."
        read -rp "${b-}[press enter to continue...]${x-}"
        echo

    else

        dna-echo -m "Ok, aborting this script now to allow you to perform the SSH configuration once again."
        dna-exit

    fi

}

dna-set_timezone() {

    read -rp "Now setting timezone. Do so at the next screen. Press enter to continue."
    dpkg-reconfigure tzdata

}

dna-create_non_root_user() {

    dna-echo -m "It's now time to create a user on this machine other than root."
    dna-echo -m "The current non-root full users with a home directory are:"

    currusers="$(cat /etc/passwd | cut -d: -f 1,3,6 | grep "[1-9][0-9][0-9][0-9]" | grep "/home" | cut -d: -f1)"

    dna-echo -m "${currusers}"

    ask_for_boolean_question="Add non-root user now?"
    dna-ask_for_boolean_def_yes

    if [ "$ask_for_boolean_output" = "y" ]
    then
    	defined="n"
    	until [ "${defined}" = "y" ]
    	do
    		new_user=""
    		until [ ! "${new_user}" = "" ]
    		do
    			read -rp "${b-}Ok, adding user now. Specify the new user's username: ${x-}" new_user
    			echo
    		done
    		valid=n
    		until [ $valid = "y" ]
    		do
    			read -n 1 -p "${b-}Is | ${new_user} | correct? (Y/n/e[xit]) ${x-}" answer;
    			case $answer in
    			"")
    				echo
    				valid=y
    				defined=y
    				;;
    			y)
    				echo -e "\n"
    				valid=y
    				defined=y
    				;;
    			n)
    				echo -e "\n"
    				echo "${b}Ok, then please try again...${x}"
    				echo
    				valid=y
    				defined=n
    				;;
    			e)
    				echo -e "\n"
    	        		echo "${b}Exiting...${x}"
    	        		echo
    	        		exit
    	        		;;
    			*)
    				echo -e "\n"
    				echo "${r}${b}Invalid option. Retry...${x}"
    	        		echo
    				valid=n
    			defined=n
    		        ;;
    			esac
    		done
    	done
    	adduser --disabled-password --gecos "" $new_user
    	usermod -aG sudo $new_user
    	echo
    	read -rp "${b}Also generate random password for | $new_user |? (Y/n): ${x}" -n 1 -r
    	echo
    	if [[ ! $REPLY =~ ^[Nn]$ ]]
    	then
    		non_root_user_pw="$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 24 | head -n 1)"
    		echo "${b}Ok. Assigning user | $new_user | the following password:${x}"
    		echo
    		echo "${b} | ${g}${non_root_user_pw}${x}${b} |${x}"
    		echo
    		echo "${new_user}:${non_root_user_pw}" | chpasswd
    		read -rp "${b}Press enter to continue...${x}"
    		echo
    	fi
    else
    	echo "${b}Skipping non-root user creation.${x}"
    	echo
    fi

}

dna-secure_root_pw() {

    ask_for_boolean_question="Would you like to generate a random password for | ${o-}root${n-} |?"
    dna-ask_for_boolean_def_yes

    if [ "$ask_for_boolean_output" = "y" ]
    then

    	root_user_pw="$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 24 | head -n 1)"

    	dna-echo -m "Ok. Assigning user | ${o-}root${n-} | the following password:"
    	dna-echo -m " | ${y-}${root_user_pw}${n-} | "

    	echo "root:${root_user_pw}" | chpasswd

    	read -rp "${b-}Press enter to continue...${x-}"
    	echo

    else

    	echo
    	dna-echo -m "Ok, skipping | ${o-}root${n-} | user password generation."

        ask_for_boolean_question="Would you instead like to entirely unset the password for | ${o-}root${n-} |?"
        dna-ask_for_boolean_def_yes

        if [ "$ask_for_boolean_output" = "y" ]
        then

    		dna-echo -m "Ok, unsetting | ${o-}root${n-} | password."
    		sudo passwd -dl root
    		echo
    	else
    		echo
    		dna-echo -m "Ok, not taking any action on | ${o-}root${n-} | password."
    		echo
    	fi

    fi

}

dna-install_basic_packages() {

    dna-install_dependencies -p "sudo software-properties-common curl ntp dnsutils haveged cronic fail2ban git glances htop pwgen pv bc"

    dna-install_mail_notifications

}

dna-inception() {

    ############################################################################

    dna-set_locale

    dna-set_ssh_pubkey

    dna-harden_ssh

    dna-initialize_ufw

    dna-prompt_ssh_connection_test

    dna-set_timezone

    dna-create_non_root_user

    dna-secure_root_pw

    dna-install_basic_packages

    dna-apt_full_upgrade

    ############################################################################

    dna-echo -s "All done with inception operations."

}
