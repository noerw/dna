#!/usr/bin/env bash

os-run_install() {

    ### Set bash environment error management

    set -eu

    echo

    now="$(date +"%Y-%m-%d_%H-%M-%S")"

    ### Define latest version
    export latest_vers="$(git --git-dir=${source_dir}/.git/ describe --tags | cut -f1 -d"-")"

    base_dir=/root/$author_name
    install_dir=$base_dir/$short_name
    conf_dir=$install_dir/conf

    ### Launch the installer

    if [ ${custom_project_version-null} = "b" ]
    then
        echo "- * - !!! - * - !!! - * - !!! - * - !!! - * - !!! - * - !!! - * - !!! - * - !!! -"
        echo
        echo "Installing bleeding-edge version of $short_name up to latest git commit as per | -e |."
        echo
        echo "- * - !!! - * - !!! - * - !!! - * - !!! - * - !!! - * - !!! - * - !!! - * - !!! -"
        ( cd $source_dir && bash ./install --return-check )
    else
        echo "Installing $short_name $latest_vers"
        echo
        ( cd $source_dir && git checkout tags/$latest_vers && bash ./install --return-check )
    fi

    ### Read the installer exit code and exit the script

    if [ -f $source_dir/install_complete ]
    then

        echo "${g-}${b-}Installation complete.${x-}"
        echo

        ### Set installation complete checkfile with installed version

        cp $conf_dir/version/version_initiated $conf_dir/version/version_installed

        ### Remove installer directory

        echo "${b-}Now removing installer directory...${x-}"
        echo
        echo "${b-}Run | ${g-}git clone https://github.com/$author_name/$proj_name${x-}${b-} | once again to download the latest installer."
        echo

        rm -r $source_dir

        echo "${b-}Exiting installer.${x-}"
        echo

    else

        echo "${r-}${b-}The installation has encountered an error.${x-}"
        echo
        echo "${b-}Please inspect the any error messages above and try the installation again or open an issue on GitHub. Thank you.${x-}"
        echo

        os-exit_function

    fi

}
