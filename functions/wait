#!/usr/bin/env bash

: ' Intro and documentation:

    ----------------------------------------------------------------------------

    dna-wait():

        This function pauses the code execution for a specified amount of time.

        These are the possible arguments to be passed to this function:

        seconds [required]:

            must be a numerical value

        description [optional]:

            must be a short text motivating the wait

    ----------------------------------------------------------------------------

    dna-wait_for():

        This function pauses the code execution until a certain condition is verified.

        These are the possible functions to be declared prior to calling this function:

        check_condition [required]:

            a function that will perform a test to see if the condition has been verified.
            if and when that occurs, it will exit after having set "condition_verified=y",
            therefore informing this function that it too can exit.

            Examples:

            check_condition() {

                ### Test to see if a file has been created

                    if [ -f "/tmp/install/installation_complete" ]
                    then
                        condition_verified=y
                    fi

                }

            check_condition() {

                ### Test to see if an SSH connection to a server succeeds

                if ssh -p42022 -o "LogLevel=ERROR" -o "StrictHostKeyChecking no" -o \
                    "UserKnownHostsFile=/dev/null" -i "/root/.ssh/hello_world" "root@${server_ipv4}" \
                    exit &> /dev/null
                then
                    condition_verified=y
                fi

            }

        These are the possible arguments to be passed to this function:

        description [required]:

            must be a short text motivating the wait

        max_seconds [optional]:

            must be a numerical value

            if this threshold is reached, the script exits with "wait_output=timeout"

        error_message [optional]:

            must be a short text explaining that the timeout has occurred while waiting for [...]

            if supplied, it will be displayed if "$max_seconds" is supplied and the timeout is reached, otherwise the timeout will occurr silently.

        check_interval [optional]:

            must be a numerical value

            by default, the check_condition function is run every second, but you
            can set this variable to indicate it should only be run every x number of seconds,
            for example for resource-intensive or rate-limited operations.

    ----------------------------------------------------------------------------

# '

dna-wait() {

	############################################################################

    if [ $# -eq 0 ]
    then
        dna-echo -e "No argument supplied for function | ${n-}${FUNCNAME[0]}${r-} |."
        dna-exit
    fi

	while getopts ":s:d:" arguments; do
		case $arguments in
			s)	seconds="$OPTARG"
                ;;
            d)  description="$OPTARG"
                ;;
			\?)	dna-echo -m "${r-}Invalid option | ${n-}-$OPTARG${r-} | for function | ${n-}${FUNCNAME[0]}${r-} |."
				dna-exit
                ;;
		esac
	done
	OPTIND=1

	if [ -z "${seconds-}" ]
	then
		dna-echo -e "Argument | ${n-}seconds [-s]${r-} | must be supplied for function | ${n-}${FUNCNAME[0]}${r-} |."
		dna-exit
	fi

	############################################################################

    tput sc
    while [ "${seconds}" -ge "0" ]
    do
        case $((seconds % 4)) in
            0 ) j="-" ;;
            1 ) j="/" ;;
            2 ) j="|" ;;
            3 ) j="\\" ;;
        esac
        tput rc
        if [ -n "${description-}" ]
        then
            echo -en "\\r${b-}| ${o-}${j}${n-} | ${description} [for ${y-}${seconds}${n-} more seconds]"
        else
            echo -en "\\r${b-}| ${o-}${j}${n-} | Now waiting... [for ${y-}${seconds}${n-} more seconds]"
        fi
        sleep 1
        ((seconds=seconds-1)) || true
    done
    echo
    echo

    unset seconds

}

dna-wait_for() {

	############################################################################

    if [ $# -eq 0 ]
    then
        dna-echo -e "No argument supplied for function | ${n-}${FUNCNAME[0]}${r-} |."
        dna-exit
    fi

	while getopts ":d:m:e:i:" arguments; do
		case $arguments in
            d)  description="$OPTARG"
                ;;
            m)  max_seconds="$OPTARG"
                ;;
            e)  error_message="$OPTARG"
                ;;
            i)  check_interval="$OPTARG"
                ;;
			\?)	dna-echo -e "Invalid option | ${n-}-$OPTARG${r-} | for function | ${n-}${FUNCNAME[0]}${r-} |."
				dna-exit
				;;
		esac
	done
	OPTIND=1

    if [ -z "${description-}" ]
	then
		dna-echo -e "Argument | ${n-}description [-d]${r-} | must be supplied for function | ${n-}${FUNCNAME[0]}${r-} |."
		dna-exit
	fi

	############################################################################

    ### check_condition must be defined immediately prior to calling this function.

    check_condition

    tput sc
    seconds=0

    while [ ! "${condition_verified-null}" = "y" ]
    do

        if [ ! -z "${max_seconds-}" ]
    	then
            if [ "${seconds}" -gt "${max_seconds-}" ]
            then
                if [ ! -z "${error_message-}" ]
                then
                    dna-echo -e "${error_message}"
                else
                    echo
                fi
                wait_output="timeout"
                break
            fi
        fi

        case $((seconds % 4)) in
            0 ) j="-" ;;
            1 ) j="\\" ;;
            2 ) j="|" ;;
            3 ) j="/" ;;
        esac
        tput rc
        if [ ! -z "${max_seconds-}" ]
        then
            remaining_seconds=$((max_seconds-seconds))
            echo -en "\\r${b-}| ${o-}${j}${n-} | ${description} [for ${y-}${remaining_seconds}${n-} more seconds]"
        else
            echo -en "\\r${b-}| ${o-}${j}${n-} | ${description}${x-}"
        fi
        sleep 1
        ((seconds=seconds+1))

        if [ ! -z "${check_interval-}" ]
        then
            if [ ! "${seconds}" = "0" ] && (( $seconds % $check_interval == 0 ))
            then
                check_condition
            fi
        else
            check_condition
        fi

        wait_output="fixed"

    done

    if [ ! -z "${wait_output-}" ]
    then
        echo
    fi

    if [ "${wait_output-null}" = "fixed" ]
    then
        echo
    fi

    if [ ! "${wait_output-null}" = "timeout" ]
    then
        wait_output="ok"
    fi

    unset seconds check_interval description max_seconds error_message check_condition condition_verified

}
