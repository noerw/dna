#!/usr/bin/env bash

dna-wait() {

	############################################################################

    if [ $# -eq 0 ]
    then
        dna-echo -e "No argument supplied for function | ${n-}${FUNCNAME[0]}${r-} |."
        dna-exit
    fi

	while getopts ":s:" arguments; do
		case $arguments in
			s)	seconds="$OPTARG"
                ;;
			\?)	dna-echo -m "${r-}Invalid option | ${n-}-$OPTARG${r-} | for function | ${n-}${FUNCNAME[0]}${r-} |."
				dna-exit
                ;;
		esac
	done
	OPTIND=1

	if [ -z "${seconds-}" ]
	then
		dna-echo -m "${r-}Argument | ${n-}seconds [-s]${r-} | must be supplied for function | ${n-}${FUNCNAME[0]}${r-} |."
		dna-exit
	fi

	############################################################################

    tput sc
    while [ "${seconds}" -ge "0" ]
    do
        case $((seconds % 4)) in
            0 ) j="-" ;;
            1 ) j="/" ;;
            2 ) j="|" ;;
            3 ) j="\\" ;;
        esac
        tput rc
        echo -en "\\r${b-}| ${o-}${j}${n-} | Now waiting ${y-}${seconds}${n-} more seconds to allow for DNS propagation...${x-}"
        sleep 1
        ((seconds=seconds-1)) || true
    done
    echo

    unset seconds

}

dna-wait_for() {

	############################################################################

    if [ $# -eq 0 ]
    then
        dna-echo -e "No argument supplied for function | ${n-}${FUNCNAME[0]}${r-} |."
        dna-exit
    fi

	while getopts ":i:d:m:e:" arguments; do
		case $arguments in
            i)  interval="$OPTARG"
                ;;
            d)  description="$OPTARG"
                ;;
            m)  max_seconds="$OPTARG"
                ;;
            e)  error_message="$OPTARG"
                ;;
			\?)	dna-echo -m "${r-}Invalid option | ${n-}-$OPTARG${r-} | for function | ${n-}${FUNCNAME[0]}${r-} |."
				dna-exit
				;;
		esac
	done
	OPTIND=1

    if [ -z "${description-}" ]
	then
		dna-echo -m "${r-}Argument | ${n-}description [-d]${r-} | must be supplied for function | ${n-}${FUNCNAME[0]}${r-} |."
		dna-exit
	fi

	############################################################################

    ### check_condition must be defined immediately prior to calling this function.

    check_condition

    tput sc
    seconds=0

    while [ ! "${condition_verified-null}" = "y" ]
    do

        if [ ! -z "${max_seconds-}" ]
    	then
            if [ "${seconds}" -gt "${max_seconds-}" ]
            then
                if [ ! -z "${error_message-}" ]
                then
                    dna-echo -e "${error_message}"
                else
                    dna-echo -e "Timeout exceeded | ${n-}${max_seconds}${r-} | seconds in function | ${n-}dna-wait_for${r-} |."
                fi
                wait_output="timeout"
            fi
        fi

        case $((seconds % 4)) in
            0 ) j="-" ;;
            1 ) j="\\" ;;
            2 ) j="|" ;;
            3 ) j="/" ;;
        esac
        tput rc
        echo -en "\\r${b-}| ${o-}${j}${n-} | ${description}${x-}"
        sleep 1
        ((seconds=seconds+1)) || true

        if [ ! -z "${interval-}" ]
        then
            if [ ! "${seconds}" = "0" ] && (( $seconds % $interval == 0 ))
            then
                check_condition
            fi
        else
            check_condition
        fi

    done
    echo

    wait_output="ok"

    unset seconds description check_condition condition_verified

}
