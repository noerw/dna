#!/usr/bin/env bash

dna-check_install_version() {

    ### From https://stackoverflow.com/a/4025065

    vercomp () {

        if [[ $1 == $2 ]]
        then
            return 0
        fi
        local IFS=.
        local i ver1=($1) ver2=($2)
        # fill empty fields in ver1 with zeros
        for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
        do
            ver1[i]=0
        done
        for ((i=0; i<${#ver1[@]}; i++))
        do
            if [[ -z ${ver2[i]} ]]
            then
                # fill empty fields in ver2 with zeros
                ver2[i]=0
            fi
            if ((10#${ver1[i]} > 10#${ver2[i]}))
            then
                return 1
            fi
            if ((10#${ver1[i]} < 10#${ver2[i]}))
            then
                return 2
            fi
        done
        return 0
        unset IFS

    }

    testvercomp () {
        vercomp $1 $2
        case $? in
            0) op='=';;
            1) op='>';;
            2) op='<';;
        esac
        if [[ $op != $3 ]]
        then
            ### echo "FAIL: Expected '$3', Actual '$op', Arg1 '$1', Arg2 '$2'"
            return 1
        else
            ### echo "Pass: '$1 $op $2'"
            return 0
        fi
    }

    ### Check if a previous installation was at the very least initiated

    if [ -f $conf_dir/version/version_initiated ]
    then

        prev_install_initiated=y
        prev_version_initiated="$(cat $conf_dir/version/version_initiated)"

        echo "${g-}${b-}Found a previous install of $proj_name.${x-}"
        echo
        read -rp "${b-}Skip the introduction on how it works? (Y/n): ${x-}" -n 1
        echo
        if [[ ! $REPLY =~ ^[Nn]$ ]]
        then
            skip_intro=y
        else
            skip_intro=n
        fi
        clear

    else

        ### If instead this is the first install...

        mkdir -p $conf_dir/version/
        skip_intro=n

    fi

    ### Log current version being initiated to version_initiated

    if [ ${custom_project_version-null} = "b" ]
    then
        latest_commit="$(cd $source_dir && git log -n 1 --pretty=format:"%H"  | cut -c1-7)"
        echo "bleeding-edge-$latest_commit" > "$conf_dir/version/version_initiated"
    else
        echo "$latest_vers" > "$conf_dir/version/version_initiated"
    fi

    ### If a previous installation was at the very least initiated...

    if [ ${prev_install_initiated-null} = "y" ]
    then

        ### If a previous version was successfully finished installing...

        if [ -f $conf_dir/version/version_installed ]
        then

            ### Check that version_initiated and version_installed match

            prev_version_installed="$(cat $conf_dir/version/version_installed)"

            if [ "$prev_version_installed" = "$prev_version_initiated" ]
            then

                ### Versions match, therefore previous install was completed successfully
                ### Proceed to ensure that, if we're not installing a bleeding-edge version, there's no more recent version already installed
                ### If instead we're installing a bleeding-edge version, skip any checks as we're certainly intalling a newer version.

                if [ ! ${custom_project_version-null} = "b" ]
                then

                    if grep -q "bleeding-edge" "$conf_dir/version/version_installed"
                    then
                        echo "${b-}You're now installing stable version | ${g-}$latest_vers${x-}${b-} | over a previously | ${r-}bleeding-edge${x-}${b-} | version of $proj_name.${x-}"
                        echo
                        echo "${b-}This is normal if you've opted out of bleeding-edge versions since the last install, but keep in mind that some features might stop working if they haven't yet been implemented in this latest stable version.${x-}"
                        echo
                        read -rp "${b-}[press enter to continue...]${x-}"
                    else

                        ### if (( $(echo "$latest_vers < $prev_version_installed" | tr -d "." | bc -l) ))
                        if testvercomp "${latest_vers//v}" "${prev_version_installed//v}" '<'
                        then
                            echo "${r-}${b-}You have previously installed a newer version of $proj_name.${x-}"
                            echo
                            echo "${b-}This is likely an error. If you're trying to manually downgrade to a previous version, edit the installer to bypass this check.${x-}"
                            echo
                            dna-exit
                        fi
                    fi

                    ### In any event, alert about the re-install

                    echo "${b-}You're now re-running the $proj_name installer.${x-}"
                    echo
                    echo "${g-}${b-}This is perfectly fine as $proj_name is meant to be re-installed as many times as you'd like [also to update your current installation].${x-}"
                    echo
                    echo "${r-}${b-}Keep in mind though that all customizations external to $proj_name you might have made will be permanently deleted.${x-}"
                    echo
                    echo "${b-}This is because the installation script goes through every configuration and sets the default values, with no regard to any anomaly it finds.${x-}"
                    echo
                    echo "${r-}${b-}If you want to save any customizations you have made, exit this script and do so now.${x-}"
                    echo
                    read -rp "${b-}[press enter to continue reading...]${x-}"

                fi

            else

                ### It appears the previous install was not completed successfully, as version_initiated is different from version_installed.

                prev_install_incomplete=y

            fi

        else

            ### It appears the previous install was not completed successfully, as there is no version_installed file, only the version_initiated one.

            prev_install_incomplete=y

        fi

        if [ ${prev_install_incomplete-null} = "y" ]
        then
            echo "${r-}${b-}It appears you have a previous incomplete installation of $proj_name.${x-}"
            echo
            echo "${b-}Either you intentionally aborted the install or the script got somehow terminated before it finished.${x-}"
            echo
            echo "${b-}In either case, if you're having any issues, simply file an issue report at:${x-}"
            echo
            echo "${b-} | https://github.com/$author_name/$proj_name/issues | ${x-}"
            echo
            echo "${b-}Thank you in advance!${x-}"
            echo
            read -rp "${b-}[press enter to continue reading...]${x-}"
            clear
        fi

        ### In any event, since there is a previous installation, at least partial, prompt for a backup.

        if [ ! ${skip_install_time_backup-null} = "y" ]
        then

            echo "${b-}It's highly recommended to run one last, fully automated backup before you proceed with the aenigma installer re-run.${x-}"
            echo
            read -rp "${b-}Do you want to run the backup now [without exiting this script] (Y/n): ${x-}" -n 1
            echo
            if [[ ! $REPLY =~ ^[Nn]$ ]]
            then
                echo "${b-}Ok, proceeding with backup...${x-}"
                if bash $source_dir/tools/$proj_name-backup -s
                then
                    backup_output=ok
                else
                    backup_output=failed
                fi
                sleep 1
                if [ $backup_output = "ok" ]
                then
                    echo "${g-}${b-}Backup complete. Continuing installation...${x-}"
                    echo
                else
                    echo "${r-}${b-}Backup failed. It's likely that by completing this installation the backup functionality will be restored, but proceed at your own risk.${x-}"
                    echo
                    read -rp "${b-}Continue anyway even without a backup? (Y/n): ${x-}" -n 1
                    echo
                    if [[ ! $REPLY =~ ^[Nn]$ ]]
                    then
                        echo "${b-}Ok, continuing...${x-}"
                        echo
                    else
                        echo
                        echo "${b-}Ok, aborting...${x-}"
                        echo
                        dna-exit
                    fi
                fi
            else
                echo
                echo "${b-}Ok, skipping backup...${x-}"
                echo
            fi

        fi

    fi

}
