#!/bin/bash

os-set_option() {

	########################################################################

	while getopts ":o:v:d:" arguments; do
		case $arguments in
			o)	option="$OPTARG"
				;;
			v)	validate="$OPTARG"
				;;
			d)	describe="$OPTARG"
				;;
			\?)	echo "${r}${b}Invalid option | -$OPTARG | for function | ${FUNCNAME[0]} |.${x}"
				echo
				os-exit_function
				;;
		esac
	done

	if [ -z "${option-}" ]
	then
		echo "${r}${b}Argument | option [-o] | must be supplied for function | ${FUNCNAME[0]} |.${x}"
		echo
		os-exit_function
	fi

	if [ ! -z "${validate-}" ]
	then
		case $validate in
			y)	validate_input=y
				;;
			n)	validate_input=n
				;;
			*)	echo "${r}${b}Invalid content for validate argument in function | ${FUNCNAME[0]} |.${x}"
				echo
				os-exit_function
				;;
		esac
	fi

	if [ ! -z "${describe-}" ]
	then
		case $describe in
			y)	describe_setting=y
				;;
			n)	describe_setting=n
				;;
			*)	echo "${r}${b}Invalid content for describe argument in function | ${FUNCNAME[0]} |.${x}"
				echo
				os-exit_function
				;;
		esac
	fi

	########################################################################

	opt_path="$conf_dir/$option"

	if [ -f "$opt_path" ]
	then
		prev_val="$(cat $opt_path)"

		if [ "${validate_input-null}" = "y" ]
		then

			input="$prev_val"

			### validate_input must be defined immediately prior to calling this function.

			validate_input

		else

			valid=y

		fi

	else

		touch $opt_path
		valid=n

	fi

	if [ $valid = "y" ]
	then
		echo "${b}Your previous value for option | ${g}$option${x}${b} | was: | ${g}$prev_val${x}${b} |. ${x}"
		echo
		read -rp "${b}Is this still correct? (Y/n): ${x}" -n 1
		echo
		if [[ ! $REPLY =~ ^[Nn]$ ]]
		then
			echo "${b}Ok, keeping | $prev_val | as your value for option | $option |.${x}"
			echo
			value="$prev_val"
		else
			echo
			skip_descr=y
			unset valid
		fi
		unset valid
	fi

	if [ -z "${value-}" ]
	then
		until [ "${defined-null}" = "y" ]
		do
			until [ "${valid-null}" = "y" ]
			do
				unset new_val
				until [ ! -z "${new_val-}" ]
				do
					if [ "${skip_descr-null}" = "y" ]
					then
						read -rp "${b}Now specify your new value for option | $option |: ${x}" new_val
						echo
					else
						if [ "${describe_setting-null}" = "y" ]
						then

							### describe_setting must be defined immediately prior to calling this function.

							describe_setting

						fi
						read -rp "${b}Now specify your value for option | $option |: ${x}" new_val
						echo
					fi
				done
				if [ "${validate_input-null}" = "y" ]
				then

					input="$new_val"

					### validate_input must be defined immediately prior to calling this function.

					validate_input

				else

					valid=y

				fi
			done
			acceptable=n
			until [ $acceptable = "y" ]
			do
				read -n 1 -rp "${b}Is | $new_val | correct? (Y/n/e[xit]) ${x}" answer;
				case $answer in
				"")
					echo
					acceptable=y
					defined=y
					;;
				y)
					echo -e "\\n"
					acceptable=y
					defined=y
					;;
				n)
					echo -e "\\n"
					echo "${b}Ok, then please try again...${x}"
					echo
					acceptable=y
					defined=n
					;;
				e)
					echo -e "\\n"
					echo "${b}Exiting...${x}"
					echo
					exit
					;;
				*)
					echo -e "\\n"
					echo "${r}${b}Invalid option. Retry...${x}"
					echo
					acceptable=n
					defined=n
					;;
				esac
			done
		done
		echo "$new_val" > "$opt_path"
		echo "${b}Option | $option | set to value | $new_val |. ${x}"
		echo
		value="$(cat $opt_path)"
	fi
	clear

	OPTIND=1

	unset arguments option validate describe validate_input describe_setting valid value skip_descr defined new_val

}
